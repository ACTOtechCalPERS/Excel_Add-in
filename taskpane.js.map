{"version":3,"file":"taskpane.js","mappings":";oEAEAA,EAAOC,QAAU,SAAUC,EAAKC,GAM9B,OALKA,IAEHA,EAAU,CAAC,GAGRD,GAKLA,EAAME,OAAOF,EAAIG,WAAaH,EAAII,QAAUJ,GAExCC,EAAQI,OAEVL,GAAOC,EAAQI,MAGbJ,EAAQK,iBAAmB,oBAAoBC,KAAKP,GAC/C,IAAKQ,OAAOR,EAAK,KAGnBA,GAfEA,CAgBX,+iCCxBIS,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAab,QAGrB,IAAID,EAASW,yBAAyBE,GAAY,CAGjDZ,QAAS,CAAC,GAOX,OAHAe,oBAAoBH,GAAUb,EAAQA,EAAOC,QAASW,qBAG/CZ,EAAOC,OACf,CAGAW,oBAAoBK,EAAID,oBCxBxBJ,oBAAoBM,EAAI,SAASlB,GAChC,IAAImB,EAASnB,GAAUA,EAAOK,WAC7B,WAAa,OAAOL,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAY,oBAAoBQ,EAAED,EAAQ,CAAEE,EAAGF,IAC5BA,CACR,ECNAP,oBAAoBQ,EAAI,SAASnB,EAASqB,GACzC,IAAI,IAAIC,KAAOD,EACXV,oBAAoBY,EAAEF,EAAYC,KAASX,oBAAoBY,EAAEvB,EAASsB,IAC5EE,OAAOC,eAAezB,EAASsB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAG3E,ECPAX,oBAAoBiB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBtB,oBAAoBY,EAAI,SAASW,EAAKC,GAAQ,OAAOX,OAAOY,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,aCAtG,IAAII,EACA5B,oBAAoBiB,EAAEY,gBAAeD,EAAY5B,oBAAoBiB,EAAEa,SAAW,IACtF,IAAIC,EAAW/B,oBAAoBiB,EAAEc,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,IAAMT,GAAWA,EAAYM,EAAQG,KAAKJ,GAExD,CAID,IAAKL,EAAW,MAAM,IAAIU,MAAM,yDAChCV,EAAYA,EAAUW,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFvC,oBAAoBwC,EAAIZ,KClBxB5B,oBAAoByC,EAAIV,SAASW,SAAWC,KAAKb,SAASc,gvDCC1DC,oBAAA,kBAAAxB,CAAA,MAAAyB,EAAAzB,EAAA,GAAA0B,EAAAlC,OAAAY,UAAAnB,EAAAyC,EAAArB,eAAAd,EAAAC,OAAAC,gBAAA,SAAAgC,EAAAzB,EAAA0B,GAAAD,EAAAzB,GAAA0B,EAAAC,KAAA,EAAAX,EAAA,mBAAAY,OAAAA,OAAA,GAAAxC,EAAA4B,EAAAa,UAAA,aAAAC,EAAAd,EAAAe,eAAA,kBAAAC,EAAAhB,EAAAiB,aAAA,yBAAAC,EAAAT,EAAAzB,EAAA0B,GAAA,OAAAlC,OAAAC,eAAAgC,EAAAzB,EAAA,CAAA2B,MAAAD,EAAAhC,YAAA,EAAAyC,cAAA,EAAAC,UAAA,IAAAX,EAAAzB,EAAA,KAAAkC,EAAA,aAAAT,GAAAS,EAAA,SAAAT,EAAAzB,EAAA0B,GAAA,OAAAD,EAAAzB,GAAA0B,CAAA,WAAAW,EAAAZ,EAAAzB,EAAA0B,EAAAzC,GAAA,IAAA+B,EAAAhB,GAAAA,EAAAI,qBAAAkC,EAAAtC,EAAAsC,EAAAlD,EAAAI,OAAA+C,OAAAvB,EAAAZ,WAAA0B,EAAA,IAAAU,EAAAvD,GAAA,WAAAM,EAAAH,EAAA,WAAAuC,MAAAc,EAAAhB,EAAAC,EAAAI,KAAA1C,CAAA,UAAAsD,EAAAjB,EAAAzB,EAAA0B,GAAA,WAAAiB,KAAA,SAAAC,IAAAnB,EAAAnB,KAAAN,EAAA0B,GAAA,OAAAD,GAAA,OAAAkB,KAAA,QAAAC,IAAAnB,EAAA,EAAAzB,EAAAqC,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAhC,EAAA,GAAAe,EAAAf,EAAA/B,GAAA,8BAAAD,EAAAK,OAAA4D,eAAAC,EAAAlE,GAAAA,EAAAA,EAAAmE,EAAA,MAAAD,GAAAA,IAAA3B,GAAAzC,EAAAqB,KAAA+C,EAAAjE,KAAA+B,EAAAkC,GAAA,IAAAzD,EAAAuD,EAAA/C,UAAAkC,EAAAlC,UAAAZ,OAAA+C,OAAApB,GAAA,SAAAoC,EAAA9B,GAAA,0BAAA+B,SAAA,SAAAxD,GAAAkC,EAAAT,EAAAzB,GAAA,SAAAyB,GAAA,YAAAgC,QAAAzD,EAAAyB,EAAA,gBAAAiC,EAAAjC,EAAAzB,GAAA,SAAA2D,EAAAjC,EAAAnC,EAAAyB,EAAA5B,GAAA,IAAA0C,EAAAY,EAAAjB,EAAAC,GAAAD,EAAAlC,GAAA,aAAAuC,EAAAa,KAAA,KAAAX,EAAAF,EAAAc,IAAAC,EAAAb,EAAAL,MAAA,OAAAkB,GAAA,UAAAe,QAAAf,IAAA5D,EAAAqB,KAAAuC,EAAA,WAAA7C,EAAA6D,QAAAhB,EAAAiB,SAAAC,MAAA,SAAAtC,GAAAkC,EAAA,OAAAlC,EAAAT,EAAA5B,EAAA,aAAAqC,GAAAkC,EAAA,QAAAlC,EAAAT,EAAA5B,EAAA,IAAAY,EAAA6D,QAAAhB,GAAAkB,MAAA,SAAAtC,GAAAO,EAAAL,MAAAF,EAAAT,EAAAgB,EAAA,aAAAP,GAAA,OAAAkC,EAAA,QAAAlC,EAAAT,EAAA5B,EAAA,IAAAA,EAAA0C,EAAAc,IAAA,KAAAlB,EAAAnC,EAAA,gBAAAoC,MAAA,SAAAF,EAAAxC,GAAA,SAAA+E,IAAA,WAAAhE,GAAA,SAAAA,EAAA0B,GAAAiC,EAAAlC,EAAAxC,EAAAe,EAAA0B,EAAA,WAAAA,EAAAA,EAAAA,EAAAqC,KAAAC,EAAAA,GAAAA,GAAA,aAAAvB,EAAAzC,EAAA0B,EAAAzC,GAAA,IAAAM,EAAAsD,EAAA,gBAAA7B,EAAA5B,GAAA,GAAAG,IAAAwD,EAAA,UAAA9B,MAAA,mCAAA1B,IAAAyD,EAAA,cAAAhC,EAAA,MAAA5B,EAAA,OAAAuC,MAAAF,EAAAwC,MAAA,OAAAhF,EAAAiF,OAAAlD,EAAA/B,EAAA2D,IAAAxD,IAAA,KAAA0C,EAAA7C,EAAAkF,SAAA,GAAArC,EAAA,KAAAE,EAAAoC,EAAAtC,EAAA7C,GAAA,GAAA+C,EAAA,IAAAA,IAAAiB,EAAA,gBAAAjB,CAAA,cAAA/C,EAAAiF,OAAAjF,EAAAoF,KAAApF,EAAAqF,MAAArF,EAAA2D,SAAA,aAAA3D,EAAAiF,OAAA,IAAA3E,IAAAsD,EAAA,MAAAtD,EAAAyD,EAAA/D,EAAA2D,IAAA3D,EAAAsF,kBAAAtF,EAAA2D,IAAA,gBAAA3D,EAAAiF,QAAAjF,EAAAuF,OAAA,SAAAvF,EAAA2D,KAAArD,EAAAwD,EAAA,IAAA5B,EAAAuB,EAAA1C,EAAA0B,EAAAzC,GAAA,cAAAkC,EAAAwB,KAAA,IAAApD,EAAAN,EAAAgF,KAAAjB,EAAAF,EAAA3B,EAAAyB,MAAAK,EAAA,gBAAAtB,MAAAR,EAAAyB,IAAAqB,KAAAhF,EAAAgF,KAAA,WAAA9C,EAAAwB,OAAApD,EAAAyD,EAAA/D,EAAAiF,OAAA,QAAAjF,EAAA2D,IAAAzB,EAAAyB,IAAA,YAAAwB,EAAApE,EAAA0B,GAAA,IAAAzC,EAAAyC,EAAAwC,OAAA3E,EAAAS,EAAA6B,SAAA5C,GAAA,GAAAM,IAAAkC,EAAA,OAAAC,EAAAyC,SAAA,eAAAlF,GAAAe,EAAA6B,SAAA4C,SAAA/C,EAAAwC,OAAA,SAAAxC,EAAAkB,IAAAnB,EAAA2C,EAAApE,EAAA0B,GAAA,UAAAA,EAAAwC,SAAA,WAAAjF,IAAAyC,EAAAwC,OAAA,QAAAxC,EAAAkB,IAAA,IAAA8B,UAAA,oCAAAzF,EAAA,aAAAgE,EAAA,IAAAjC,EAAA0B,EAAAnD,EAAAS,EAAA6B,SAAAH,EAAAkB,KAAA,aAAA5B,EAAA2B,KAAA,OAAAjB,EAAAwC,OAAA,QAAAxC,EAAAkB,IAAA5B,EAAA4B,IAAAlB,EAAAyC,SAAA,KAAAlB,EAAA,IAAA7D,EAAA4B,EAAA4B,IAAA,OAAAxD,EAAAA,EAAA6E,MAAAvC,EAAA1B,EAAA2E,YAAAvF,EAAAuC,MAAAD,EAAAkD,KAAA5E,EAAA6E,QAAA,WAAAnD,EAAAwC,SAAAxC,EAAAwC,OAAA,OAAAxC,EAAAkB,IAAAnB,GAAAC,EAAAyC,SAAA,KAAAlB,GAAA7D,GAAAsC,EAAAwC,OAAA,QAAAxC,EAAAkB,IAAA,IAAA8B,UAAA,oCAAAhD,EAAAyC,SAAA,KAAAlB,EAAA,UAAA6B,EAAArD,GAAA,IAAAzB,EAAA,CAAA+E,OAAAtD,EAAA,SAAAA,IAAAzB,EAAAgF,SAAAvD,EAAA,SAAAA,IAAAzB,EAAAiF,WAAAxD,EAAA,GAAAzB,EAAAkF,SAAAzD,EAAA,SAAA0D,WAAAC,KAAApF,EAAA,UAAAqF,EAAA5D,GAAA,IAAAzB,EAAAyB,EAAA6D,YAAA,GAAAtF,EAAA2C,KAAA,gBAAA3C,EAAA4C,IAAAnB,EAAA6D,WAAAtF,CAAA,UAAAwC,EAAAf,GAAA,KAAA0D,WAAA,EAAAJ,OAAA,SAAAtD,EAAA+B,QAAAsB,EAAA,WAAAS,OAAA,YAAAjC,EAAAtD,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAA0B,EAAA1B,EAAAZ,GAAA,GAAAsC,EAAA,OAAAA,EAAApB,KAAAN,GAAA,sBAAAA,EAAA4E,KAAA,OAAA5E,EAAA,IAAAwF,MAAAxF,EAAAe,QAAA,KAAAxB,GAAA,EAAAyB,EAAA,SAAA4D,IAAA,OAAArF,EAAAS,EAAAe,QAAA,GAAA9B,EAAAqB,KAAAN,EAAAT,GAAA,OAAAqF,EAAAjD,MAAA3B,EAAAT,GAAAqF,EAAAX,MAAA,EAAAW,EAAA,OAAAA,EAAAjD,MAAAF,EAAAmD,EAAAX,MAAA,EAAAW,CAAA,SAAA5D,EAAA4D,KAAA5D,CAAA,YAAA0D,UAAAd,QAAA5D,GAAA,2BAAAkD,EAAA9C,UAAA+C,EAAA5D,EAAAK,EAAA,eAAA+B,MAAAwB,EAAAhB,cAAA,IAAA5C,EAAA4D,EAAA,eAAAxB,MAAAuB,EAAAf,cAAA,IAAAe,EAAAuC,YAAAvD,EAAAiB,EAAAnB,EAAA,qBAAAhC,EAAA0F,oBAAA,SAAAjE,GAAA,IAAAzB,EAAA,mBAAAyB,GAAAA,EAAAkE,YAAA,QAAA3F,IAAAA,IAAAkD,GAAA,uBAAAlD,EAAAyF,aAAAzF,EAAA4F,MAAA,EAAA5F,EAAA6F,KAAA,SAAApE,GAAA,OAAAjC,OAAAsG,eAAAtG,OAAAsG,eAAArE,EAAA0B,IAAA1B,EAAAsE,UAAA5C,EAAAjB,EAAAT,EAAAO,EAAA,sBAAAP,EAAArB,UAAAZ,OAAA+C,OAAA3C,GAAA6B,CAAA,EAAAzB,EAAAgG,MAAA,SAAAvE,GAAA,OAAAqC,QAAArC,EAAA,EAAA8B,EAAAG,EAAAtD,WAAA8B,EAAAwB,EAAAtD,UAAA0B,GAAA,0BAAA9B,EAAA0D,cAAAA,EAAA1D,EAAAiG,MAAA,SAAAxE,EAAAC,EAAAzC,EAAAM,EAAAyB,QAAA,IAAAA,IAAAA,EAAAkF,SAAA,IAAA9G,EAAA,IAAAsE,EAAArB,EAAAZ,EAAAC,EAAAzC,EAAAM,GAAAyB,GAAA,OAAAhB,EAAA0F,oBAAAhE,GAAAtC,EAAAA,EAAAwF,OAAAb,MAAA,SAAAtC,GAAA,OAAAA,EAAAwC,KAAAxC,EAAAE,MAAAvC,EAAAwF,MAAA,KAAArB,EAAA3D,GAAAsC,EAAAtC,EAAAoC,EAAA,aAAAE,EAAAtC,EAAAR,GAAA,0BAAA8C,EAAAtC,EAAA,qDAAAI,EAAAmG,KAAA,SAAA1E,GAAA,IAAAzB,EAAAR,OAAAiC,GAAAC,EAAA,WAAAzC,KAAAe,EAAA0B,EAAA0D,KAAAnG,GAAA,OAAAyC,EAAA0E,UAAA,SAAAxB,IAAA,KAAAlD,EAAAX,QAAA,KAAAU,EAAAC,EAAA2E,MAAA,GAAA5E,KAAAzB,EAAA,OAAA4E,EAAAjD,MAAAF,EAAAmD,EAAAX,MAAA,EAAAW,CAAA,QAAAA,EAAAX,MAAA,EAAAW,CAAA,GAAA5E,EAAAsD,OAAAA,EAAAd,EAAApC,UAAA,CAAAuF,YAAAnD,EAAA+C,MAAA,SAAAvF,GAAA,QAAAsG,KAAA,OAAA1B,KAAA,OAAAP,KAAA,KAAAC,MAAA7C,EAAA,KAAAwC,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAAtB,IAAAnB,EAAA,KAAA0D,WAAA3B,QAAA6B,IAAArF,EAAA,QAAA0B,KAAA,WAAAA,EAAA6E,OAAA,IAAAtH,EAAAqB,KAAA,KAAAoB,KAAA8D,OAAA9D,EAAA8E,MAAA,WAAA9E,GAAAD,EAAA,EAAAgF,KAAA,gBAAAxC,MAAA,MAAAxC,EAAA,KAAA0D,WAAA,GAAAG,WAAA,aAAA7D,EAAAkB,KAAA,MAAAlB,EAAAmB,IAAA,YAAA8D,IAAA,EAAAnC,kBAAA,SAAAvE,GAAA,QAAAiE,KAAA,MAAAjE,EAAA,IAAA0B,EAAA,cAAAiF,EAAA1H,EAAAM,GAAA,OAAAH,EAAAuD,KAAA,QAAAvD,EAAAwD,IAAA5C,EAAA0B,EAAAkD,KAAA3F,EAAAM,IAAAmC,EAAAwC,OAAA,OAAAxC,EAAAkB,IAAAnB,KAAAlC,CAAA,SAAAA,EAAA,KAAA4F,WAAApE,OAAA,EAAAxB,GAAA,IAAAA,EAAA,KAAAyB,EAAA,KAAAmE,WAAA5F,GAAAH,EAAA4B,EAAAsE,WAAA,YAAAtE,EAAA+D,OAAA,OAAA4B,EAAA,UAAA3F,EAAA+D,QAAA,KAAAuB,KAAA,KAAAxE,EAAA7C,EAAAqB,KAAAU,EAAA,YAAAgB,EAAA/C,EAAAqB,KAAAU,EAAA,iBAAAc,GAAAE,EAAA,SAAAsE,KAAAtF,EAAAgE,SAAA,OAAA2B,EAAA3F,EAAAgE,UAAA,WAAAsB,KAAAtF,EAAAiE,WAAA,OAAA0B,EAAA3F,EAAAiE,WAAA,SAAAnD,GAAA,QAAAwE,KAAAtF,EAAAgE,SAAA,OAAA2B,EAAA3F,EAAAgE,UAAA,YAAAhD,EAAA,UAAAf,MAAA,kDAAAqF,KAAAtF,EAAAiE,WAAA,OAAA0B,EAAA3F,EAAAiE,WAAA,KAAAT,OAAA,SAAA/C,EAAAzB,GAAA,QAAA0B,EAAA,KAAAyD,WAAApE,OAAA,EAAAW,GAAA,IAAAA,EAAA,KAAAnC,EAAA,KAAA4F,WAAAzD,GAAA,GAAAnC,EAAAwF,QAAA,KAAAuB,MAAArH,EAAAqB,KAAAf,EAAA,oBAAA+G,KAAA/G,EAAA0F,WAAA,KAAAjE,EAAAzB,EAAA,OAAAyB,IAAA,UAAAS,GAAA,aAAAA,IAAAT,EAAA+D,QAAA/E,GAAAA,GAAAgB,EAAAiE,aAAAjE,EAAA,UAAA5B,EAAA4B,EAAAA,EAAAsE,WAAA,UAAAlG,EAAAuD,KAAAlB,EAAArC,EAAAwD,IAAA5C,EAAAgB,GAAA,KAAAkD,OAAA,YAAAU,KAAA5D,EAAAiE,WAAAhC,GAAA,KAAA2D,SAAAxH,EAAA,EAAAwH,SAAA,SAAAnF,EAAAzB,GAAA,aAAAyB,EAAAkB,KAAA,MAAAlB,EAAAmB,IAAA,gBAAAnB,EAAAkB,MAAA,aAAAlB,EAAAkB,KAAA,KAAAiC,KAAAnD,EAAAmB,IAAA,WAAAnB,EAAAkB,MAAA,KAAA+D,KAAA,KAAA9D,IAAAnB,EAAAmB,IAAA,KAAAsB,OAAA,cAAAU,KAAA,kBAAAnD,EAAAkB,MAAA3C,IAAA,KAAA4E,KAAA5E,GAAAiD,CAAA,EAAA4D,OAAA,SAAApF,GAAA,QAAAzB,EAAA,KAAAmF,WAAApE,OAAA,EAAAf,GAAA,IAAAA,EAAA,KAAA0B,EAAA,KAAAyD,WAAAnF,GAAA,GAAA0B,EAAAuD,aAAAxD,EAAA,YAAAmF,SAAAlF,EAAA4D,WAAA5D,EAAAwD,UAAAG,EAAA3D,GAAAuB,CAAA,GAAA6D,MAAA,SAAArF,GAAA,QAAAzB,EAAA,KAAAmF,WAAApE,OAAA,EAAAf,GAAA,IAAAA,EAAA,KAAA0B,EAAA,KAAAyD,WAAAnF,GAAA,GAAA0B,EAAAqD,SAAAtD,EAAA,KAAAxC,EAAAyC,EAAA4D,WAAA,aAAArG,EAAA0D,KAAA,KAAApD,EAAAN,EAAA2D,IAAAyC,EAAA3D,EAAA,QAAAnC,CAAA,YAAA0B,MAAA,0BAAA8F,cAAA,SAAA/G,EAAA0B,EAAAzC,GAAA,YAAAkF,SAAA,CAAAtC,SAAAyB,EAAAtD,GAAA2E,WAAAjD,EAAAmD,QAAA5F,GAAA,cAAAiF,SAAA,KAAAtB,IAAAnB,GAAAwB,CAAA,GAAAjD,CAAA,UAAAgH,mBAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAA9H,EAAAsD,GAAA,QAAAyE,EAAAJ,EAAA3H,GAAAsD,GAAAjB,EAAA0F,EAAA1F,KAAA,OAAA2F,GAAA,YAAAJ,EAAAI,EAAA,CAAAD,EAAApD,KAAAJ,EAAAlC,GAAAuE,QAAArC,QAAAlC,GAAAoC,KAAAoD,EAAAC,EAAA,UAAAG,kBAAAC,GAAA,sBAAAlG,EAAA,KAAAmG,EAAAC,UAAA,WAAAxB,SAAA,SAAArC,EAAAqD,GAAA,IAAAD,EAAAO,EAAAG,MAAArG,EAAAmG,GAAA,SAAAN,EAAAxF,GAAAqF,mBAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAA,OAAAzF,EAAA,UAAAyF,EAAAQ,GAAAZ,mBAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAA,QAAAQ,EAAA,CAAAT,OAAArI,EAAA,cAAA8E,QAAArE,GAAA,OAAAqE,QAAA,mBAAAhC,QAAA,iBAAAA,OAAAC,SAAA,SAAAtC,GAAA,cAAAA,CAAA,WAAAA,GAAA,OAAAA,GAAA,mBAAAqC,QAAArC,EAAAoG,cAAA/D,QAAArC,IAAAqC,OAAAxB,UAAA,gBAAAb,CAAA,EAAAqE,QAAArE,EAAA,UAAAsI,gBAAAC,EAAAC,GAAA,KAAAD,aAAAC,GAAA,UAAArD,UAAA,8CAAAsD,kBAAAC,EAAAC,GAAA,QAAAlH,EAAA,EAAAA,EAAAkH,EAAAnH,OAAAC,IAAA,KAAAmH,EAAAD,EAAAlH,GAAAmH,EAAAzI,WAAAyI,EAAAzI,aAAA,EAAAyI,EAAAhG,cAAA,YAAAgG,IAAAA,EAAA/F,UAAA,GAAA5C,OAAAC,eAAAwI,EAAAG,eAAAD,EAAA7I,KAAA6I,EAAA,WAAAE,aAAAN,EAAAO,EAAAC,GAAA,OAAAD,GAAAN,kBAAAD,EAAA3H,UAAAkI,GAAAC,GAAAP,kBAAAD,EAAAQ,GAAA/I,OAAAC,eAAAsI,EAAA,aAAA3F,UAAA,IAAA2F,CAAA,UAAAK,eAAA3G,GAAA,IAAAT,EAAAwH,aAAA/G,EAAA,0BAAAmC,QAAA5C,GAAAA,EAAA7C,OAAA6C,EAAA,UAAAwH,aAAA/G,EAAAC,GAAA,aAAAkC,QAAAnC,KAAAA,EAAA,OAAAA,EAAA,IAAAzB,EAAAyB,EAAAG,OAAA6G,aAAA,YAAAzI,EAAA,KAAAgB,EAAAhB,EAAAM,KAAAmB,EAAAC,GAAA,wBAAAkC,QAAA5C,GAAA,OAAAA,EAAA,UAAA0D,UAAA,kEAAAhD,EAAAvD,OAAAuK,QAAAjH,EAAA,KAQMkH,cAAa,WAEjB,SAAAA,EAAYC,EAAQC,GAAMhB,gBAAA,KAAAc,GACxB7I,KAAK8F,KAAOgD,EACZ9I,KAAKgJ,IAAMD,EACX/I,KAAKiJ,UAAY,GACjBjJ,KAAKkJ,YAAc,EACrB,CAiCC,OAjCAX,aAAAM,EAAA,EAAArJ,IAAA,eAAAqC,MAED,SAAasH,GACX,IAAK,IAAIC,EAAM,EAAGA,EAAMD,EAAKlI,OAAQmI,IAC/BA,EAAM,GAAoB,IAAfD,EAAKC,GAAK,IACvBpJ,KAAKkJ,YAAY5D,KAAK,CACpB+D,IAAKF,EAAKC,GAAK,GACfE,OAAQH,EAAKC,GAAK,GAClBG,OAAQJ,EAAKC,GAAK,GAClBI,WAAYL,EAAKC,GAAK,GACtBK,YAAaN,EAAKC,GAAK,GACvBM,WAAYP,EAAKC,GAAK,GACtBO,UAAWR,EAAKC,GAAK,KAKnBpJ,KAAKgJ,KAAOG,EAAKC,GAAK,KAExBQ,IAAMT,EAAKC,GAAK,GAChBS,QAAUV,EAAKC,GAAK,GACpBU,YAAcX,EAAKC,GAAK,GACxBW,SAAWZ,EAAKC,GAAK,GAErBpJ,KAAKiJ,UAAU3D,KAAK,CAClB0E,aAAeJ,IACfK,eAAiBJ,QACjBK,aAAeJ,YACfK,UAAYJ,WAKtB,KAAClB,CAAA,CAxCgB,GAoDbuB,kBAAiB7B,cAErB,SAAA6B,EAAYC,EAAMC,EAAYC,GAAexC,gBAAA,KAAAqC,GAC3CpK,KAAKwK,KAAOH,EACZrK,KAAKyK,cAAgB,SAAWJ,EAChCrK,KAAKkB,EAAI0H,OAAO0B,GAChBtK,KAAKkD,EAAI0F,OAAO2B,EAClB,IAWIG,eAAc,WAElB,SAAAA,eAAYC,EAASC,EAAcC,EAAcC,EAAaC,EAAaC,EAAcC,EAAkBC,GAAiBnD,gBAAA,KAAA2C,gBAC1H1K,KAAKmL,YAAcN,EACnB7K,KAAKoL,WAAaN,EAClB9K,KAAKqL,WAAaN,EAClB/K,KAAKsL,YAAcN,EACnBhL,KAAKuL,gBAAkBN,EACvBjL,KAAKwL,gBAAkBN,EACvBlL,KAAKyL,WAAa,GAClBzL,KAAK0L,iBAAmB,GACxB1L,KAAK2L,eAAiB,GACtB3L,KAAK4L,UAAY,GACjB5L,KAAK6L,cAAclB,GACnB3K,KAAK8L,aAAanB,EAASC,GAC3B5K,KAAK+L,oBACL/L,KAAKgM,qBACP,CAgGC,OAhGAzD,aAAAmC,eAAA,EAAAlL,IAAA,gBAAAqC,MAED,SAAc8I,GAAQ,IAAAsB,EAAA,KACdC,EAASlM,KAAKoL,WAAW,GAAGnK,OAClCjB,KAAKqL,WAAW3H,SAAQ,SAAAyI,GAEtB,IADA,IAAIC,EAAgBD,EACVE,EAAM,EAAGA,EAAMH,EAAQG,IAC/B,GAAIF,GAAWF,EAAKb,WAAW,GAAGiB,GAAK,CACrCD,EAAgBH,EAAKb,WAAW,GAAGiB,GACnC,KACF,CAEJJ,EAAKR,WAAWnG,KAAK8G,EACrB,GACF,GAAC,CAAA5M,IAAA,eAAAqC,MAED,SAAa8I,EAASC,GAAa,IAAA0B,EAAA,KAE3BC,EAASvM,KAAKoL,WAAWnK,OACzBiL,EAASlM,KAAKoL,WAAW,GAAGnK,OAElCjB,KAAKqL,WAAW3H,SAAQ,SAAAyI,GACtB,IAAIK,EAAgB,GACpB9M,OAAO2G,KAAKsE,EAAQ1B,WAAWvF,SAAQ,SAAAlE,GAErC,IADA,IAAIoK,EAAMe,EAAQ1B,UAAUzJ,GAAKwK,aACxBZ,EAAM,EAAGA,EAAMmD,EAAQnD,IAC9B,GAAIQ,GAAO0C,EAAKlB,WAAWhC,GAAK,GAC9B,IAAM,IAAIiD,EAAM,EAAGA,EAAMH,EAAQG,IAC3BF,GAAWG,EAAKlB,WAAW,GAAGiB,IAChCG,EAAclH,KAAK,CAAE0E,aAAeJ,EAAK6C,WAAaN,EAASO,SAAWJ,EAAKlB,WAAWhC,GAAKiD,IAKzG,IACKG,EAAcvL,QACjBvB,OAAO2G,KAAKsE,EAAQ1B,WAAWvF,SAAQ,SAAAlE,GACvCgN,EAAclH,KAAK,CAAE0E,aAAe,EAAGyC,WAAa,EAAGC,SAAW,GAClE,IAEFJ,EAAKV,UAAUtG,KAAKkH,EACtB,GAEF,GAAC,CAAAhN,IAAA,oBAAAqC,MAED,WAEE,IAAK,IAAIoB,EAAI,EAAGA,EAAIjD,KAAKqL,WAAWpK,OAAQgC,IAAI,CAE9C,IADA,IAAI0J,EAAO,EACFpJ,EAAI,EAAGA,EAAIvD,KAAK4L,UAAU,GAAG3K,OAAQsC,IAC5CoJ,GAAc/D,OAAO5I,KAAK4L,UAAU3I,GAAGM,GAAGmJ,UAE5C1M,KAAK2L,eAAerG,KAAKqH,EAC3B,CAEF,GAAC,CAAAnN,IAAA,sBAAAqC,MAED,SAAAmK,sBAEE,IAAK,IAAI/I,EAAI,EAAGA,EAAIjD,KAAKqL,WAAWpK,OAAQgC,IACX,OAA3BjD,KAAKwL,gBAAgBvI,GACvBjD,KAAK0L,iBAAiBpG,KAAKtF,KAAK2L,eAAe1I,IAEb,OAA3BjD,KAAKwL,gBAAgBvI,GAC5BjD,KAAK0L,iBAAiBpG,KAAK,OAEO,QAA3BtF,KAAKwL,gBAAgBvI,GAC5BjD,KAAK0L,iBAAiBpG,KAAK,KAG3BsH,OAASC,KAAK7M,KAAKwL,gBAAgBvI,IACnCjD,KAAK0L,iBAAiBpG,KAAKsH,QAC3B5M,KAAK2L,eAAe1I,GAAK2J,OAG/B,GAAC,CAAApN,IAAA,cAAAqC,MAED,SAAYiL,EAAMC,GAChB,OAAyD,GAAtD/M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQD,KAAqE,IAAtD/M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQD,IAClG,EACD/M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQF,IAAS9M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQD,GAC1G,GAAC,CAAAvN,IAAA,cAAAqC,MAED,SAAYiL,EAAMC,GAChB,OAAO/M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQF,IAAS9M,KAAK2L,eAAe3L,KAAKyL,WAAWuB,QAAQD,GAC1G,GAAC,CAAAvN,IAAA,gBAAAqC,MAED,SAAciL,EAAMC,GAGlB,IADA,IAAIE,EAAM,EACF1J,EAAI,EAAGA,EAAIvD,KAAK4L,UAAU,GAAG3K,OAAQsC,IAE3C0J,GAAajN,KAAK4L,UAAU5L,KAAKyL,WAAWuB,QAAQF,IAAOvJ,GAAGmJ,SAAW1M,KAAK4L,UAAU5L,KAAKyL,WAAWuB,QAAQD,IAAOxJ,GAAGmJ,SAE5H,OAAOO,CAET,KAACvC,cAAA,CAjHiB,GA8IpB,SAKewC,SAAQC,GAAA,OAAAC,UAAAvF,MAAC,KAADD,UAAA,CAOvB,SAAAwF,YAFC,OAEDA,UAAA3F,kBAAA/F,sBAAAqE,MAPA,SAAAsH,EAAwBC,GAAK,OAAA5L,sBAAAa,MAAA,SAAAgL,GAAA,cAAAA,EAAA/G,KAAA+G,EAAAzI,MAAA,cAAAyI,EAAAzI,KAAA,EACnB0I,MAAMC,IAAG,eAAAC,EAAAjG,kBAAA/F,sBAAAqE,MAAC,SAAA4H,EAAOC,GAAO,OAAAlM,sBAAAa,MAAA,SAAAsL,GAAA,cAAAA,EAAArH,KAAAqH,EAAA/I,MAAA,cAAA+I,EAAA/I,KAAA,EACpB8I,EAAQE,OAAM,OACpBC,WAAWT,GAAO,wBAAAO,EAAAlH,OAAA,GAAAgH,EAAA,KACvB,gBAAAK,GAAA,OAAAN,EAAA7F,MAAA,KAAAD,UAAA,EAHgB,IAGf,wBAAA2F,EAAA5G,OAAA,GAAA0G,EAAA,KACHD,UAAAvF,MAAA,KAAAD,UAAA,UAWcmG,WAAUE,GAAA,OAAAC,YAAArG,MAAC,KAADD,UAAA,CA4BzB,SAAAsG,cAFC,OAEDA,YAAAzG,kBAAA/F,sBAAAqE,MA5BA,SAAAoI,EAA0Bb,GAAK,OAAA5L,sBAAAa,MAAA,SAAA6L,GAAA,cAAAA,EAAA5H,KAAA4H,EAAAtJ,MAAA,cAAAsJ,EAAA5H,KAAA,EAAA4H,EAAAtJ,KAAA,EAGrB0I,MAAMC,IAAG,eAAAY,EAAA5G,kBAAA/F,sBAAAqE,MAAC,SAAAuI,EAAOV,GAAO,IAAAW,EAAAC,EAAAC,EAAA,OAAA/M,sBAAAa,MAAA,SAAAmM,GAAA,cAAAA,EAAAlI,KAAAkI,EAAA5J,MAAA,OAMA,OAJxByJ,EAAUX,EAAQe,SAASC,WAAWC,QAAQ,4BAE9CL,EAAQD,EAAQO,SAAS,SAEzBC,KAAK,mBAAmBL,EAAA5J,KAAA,EAExB8I,EAAQE,OAAM,OAGdW,EAAYD,EAAMQ,QAAQtI,MAAM8H,EAAMQ,QAAQhC,QAAQ,KAAO,GAE/DM,EAAM0B,SAAWP,IAEjBQ,QAAQC,IAAI,wBAADvQ,OAAyB2O,EAAM0B,QAAO,YAAArQ,OAAW2O,EAAM6B,WAAU,cAAAxQ,OAAa2O,EAAM8B,SAC/FC,iBACAC,mBACH,wBAAAZ,EAAA/H,OAAA,GAAA2H,EAAA,KAEA,gBAAAiB,GAAA,OAAAlB,EAAAxG,MAAA,KAAAD,UAAA,EApBc,IAoBb,OAAAwG,EAAAtJ,KAAA,eAAAsJ,EAAA5H,KAAA,EAAA4H,EAAAoB,GAAApB,EAAA,SAESa,QAAQzH,MAAK4G,EAAAoB,IAAQ,wBAAApB,EAAAzH,OAAA,GAAAwH,EAAA,kBACnCD,YAAArG,MAAA,KAAAD,UAAA,UAWcyH,iBAAc,OAAAI,gBAAA5H,MAAC,KAADD,UAAA,CAgE7B,SAAA6H,kBAFC,OAEDA,gBAAAhI,kBAAA/F,sBAAAqE,MAhEA,SAAA2J,IAAA,OAAAhO,sBAAAa,MAAA,SAAAoN,GAAA,cAAAA,EAAAnJ,KAAAmJ,EAAA7K,MAAA,cAAA6K,EAAA7K,KAAA,EAEQ0I,MAAMC,IAAG,eAAAmC,EAAAnI,kBAAA/F,sBAAAqE,MAAC,SAAA8J,EAAOjC,GAAO,IAAAkC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtP,sBAAAa,MAAA,SAAA0O,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAnM,MAAA,OAkCK,OAhC3BgL,EAAsBlC,EAAQe,SAASC,WAAWC,QAAQ,2BAC1DkB,EAAuBnC,EAAQe,SAASC,WAAWC,QAAQ,4BAC3DmB,EAAkBpC,EAAQe,SAASC,WAAWC,QAAQ,2BACtDoB,EAAcrC,EAAQe,SAASC,WAAWC,QAAQ,yBAClDqB,EAAetC,EAAQe,SAASC,WAAWC,QAAQ,WACnDsB,EAAevC,EAAQe,SAASC,WAAWC,QAAQ,kBAEnDuB,EAAqBN,EAAoBhB,SAAS,aAClDuB,EAAsBN,EAAqBjB,SAAS,YACpDwB,EAAaL,EAAYnB,SAAS,YAClCyB,EAAcJ,EAAarB,SAAS,UAEpC0B,EAAmBR,EAAgBlB,SAAS,OAC5C2B,EAAgBT,EAAgBlB,SAAS,cAEzC4B,EAAoBR,EAAapB,SAAS,gBAC1C6B,EAAmBT,EAAapB,SAAS,iBACzC8B,EAAoBV,EAAapB,SAAS,kBAGhDsB,EAAmBrB,KAAK,0CACxBsB,EAAoBtB,KAAK,0CACzBuB,EAAWvB,KAAK,0CAChBwB,EAAYxB,KAAK,0CAGjByB,EAAiBzB,KAAK,UACtB0B,EAAc1B,KAAK,UAGnB2B,EAAkB3B,KAAK,UACvB4B,EAAiB5B,KAAK,UACtB6B,EAAkB7B,KAAK,UAAUkC,EAAAnM,KAAA,GAE7B8I,EAAQE,OAAM,QAGZ+C,EAASP,EAAW9M,QACpBsN,EAAS,IAAIjI,cAAc2H,EAAiBhN,OAAQiN,EAAcjN,SACjE0N,aAAaL,GAKdE,EAAc,IAAI3G,kBAAkBsG,EAAkBlN,OAAQmN,EAAiBnN,OAAQoN,EAAkBpN,QAGzGwN,EAAO,CAACZ,EAAmB5M,OAAQ6M,EAAoB7M,OAAQ+M,EAAY/M,QAE/EyL,QAAQC,IAAI,qCAADvQ,OAAsCmS,EAAOhL,KAAI,YAAAnH,OAAWmS,EAAO9H,IAAG,MACjFiG,QAAQC,IAAI,kCAAmCD,QAAQC,IAAI4B,EAAO7H,WAClEgG,QAAQC,IAAI,+CAADvQ,OAAgDoS,EAAYtG,cAAa,sBAAA9L,OAAqBoS,EAAY7P,EAAC,2BAAAvC,OAA0BoS,EAAY7N,IAE5JiO,cAAcL,EAAQC,EAAaF,GAEnCO,oBAAoBN,EAAQC,EAAaC,GAAK,yBAAAC,EAAAtK,OAAA,GAAAkJ,EAAA,KACjD,gBAAAwB,GAAA,OAAAzB,EAAA/H,MAAA,KAAAD,UAAA,EA1Dc,IA0Db,wBAAA+H,EAAAhJ,OAAA,GAAA+I,EAAA,KAEHD,gBAAA5H,MAAA,KAAAD,UAAA,CASD,SAASuJ,cAAcxG,EAAS2G,GAE9B1Q,SAAS2Q,eAAe,YAAYC,UAAY7G,EAAQ7E,KACxDlF,SAAS2Q,eAAe,WAAWC,UAAY7G,EAAQ3B,IACvDpI,SAAS2Q,eAAe,QAAQC,UAAYF,EAAO7G,cAEnDgH,gBAAgB9G,EAClB,CAYA,SAASyG,oBAAoBzG,EAASC,EAAc8G,GAGlD,IAAMC,EAAMD,EAAM,GAmCVE,GAlCIF,EAAM,GACNA,EAAM,GAiCE,IAAIhH,eAAeC,EAASC,EAPvB,wBACD+G,EACA,CAAC,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,IACrB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,8CAA8C,uDAAuD,MAAM,MAAM,MAAM,MAAM,SAYnJE,EAAY,IAAInH,eAAeC,EAASC,EAPvB,wBACD+G,EACA,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,MAAM,MAAM,8DAA8D,MAAM,MAAM,kEAY5GG,EAAY,IAAIpH,eAAeC,EAASC,EAPvB,2BACD+G,EACA,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvB,CAAC,OAAO,MAAM,MAAM,gDAAgD,OAAO,MAAM,MAAM,6CAA6C,OAAO,MAAM,MAAM,kDAY5KI,EAAY,IAAIrH,eAAeC,EAASC,EAPvB,4BACD+G,EACA,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACxB,CAAC,OAAO,MAAM,MAAM,gDAAgD,OAAO,MAAM,MAAM,6CAA6C,OAAO,MAAM,MAAM,kDAY3KK,EAAa,IAAItH,eAAeC,EAASC,EAPxB,4BACA+G,EACA,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACxB,CAAC,OAAO,MAAM,MAAM,kDAAkD,OAAO,MAAM,MAAM,6CAA6C,OAAO,MAAM,MAAM,oDAY9KM,EAAc,IAAIvH,eAAeC,EAASC,EAPxB,WACA+G,EACA,CAAC,KACA,CAAC,GACG,CAAC,GACF,CAAC,QAWvBO,EAAgB,IAAIxH,eAAeC,EAASC,EANxB,aACA+G,EACA,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC9B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACd,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,QAc7DQ,EAAa,IAAIzH,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAI,IAAI,IAAI,KACrB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,MAAM,8DAA6D,4HAYrGS,EAAa,IAAI1H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAK,IAAK,IAAK,KACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,6DAA6D,0DAA2D,kDAAmD,+CAY7MU,EAAa,IAAI3H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAK,IAAK,IAAK,KACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,2DAA2D,0DAA2D,kDAAmD,6CAY3MW,EAAa,IAAI5H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAK,IAAK,IAAK,KACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,2DAA2D,0DAA2D,kDAAmD,6CAY3MY,EAAa,IAAI7H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAK,IAAK,IAAK,KACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,2DAA2D,0DAA2D,kDAAmD,6CAa3Ma,EAAa,IAAI9H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAI,IAAK,IAAK,KACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,2DAA2D,0DAA2D,kDAAmD,6CAa3Mc,EAAa,IAAI/H,eAAeC,EAASC,EAPxB,oBACA+G,EACD,CAAC,KAAK,IAAK,IAAI,IAAM,IAAK,KACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACZ,CAAC,MAAM,MAAM,2DAA2D,0DAA2D,kDAAmD,6CAKnNe,gBAAgBd,EAAWjH,GAC3B+H,gBAAgBb,EAAWlH,GAC3B+H,gBAAgBZ,EAAWnH,GAC3B+H,gBAAgBX,EAAWpH,GAC3B+H,gBAAgBV,EAAWrH,GAC3B+H,gBAAgBT,EAAYtH,GAC5B+H,gBAAgBR,EAAcvH,GAC9B+H,gBAAgBP,EAAWxH,GAC3B+H,gBAAgBN,EAAWzH,GAC3B+H,gBAAgBL,EAAW1H,GAC3B+H,gBAAgBJ,EAAW3H,GAC3B+H,gBAAgBH,EAAW5H,GAC3B+H,gBAAgBF,EAAW7H,GAC3B+H,gBAAgBD,EAAW9H,EAC7B,CAUA,SAAS+H,gBAAgBC,EAAQhI,GAI/B,IAFA,IAAIiI,EAAYhS,SAAS2Q,eAAeoB,EAAOxH,aAAanK,qBAAqB,SAAS,GACtF6R,EAAWjS,SAAS2Q,eAAeoB,EAAOxH,aAAanK,qBAAqB,SAAS,GACnF4R,EAAUE,KAAK7R,OAAS,GAAG2R,EAAUG,UAAU,GACrD,KAAMF,EAAUC,KAAK7R,OAAS,GAAG4R,EAAUE,UAAU,GAErD,IAAK,IAAInJ,EAAM,EAAGA,EAAMe,EAAQ1B,UAAUhI,OAAQ2I,IAClD,CACE,IAAIR,EAAMwJ,EAAUI,WAAW,GAEZ5J,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKK,eAC/Bb,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKI,aAE9C,IAAI,IAAIkJ,EAAQ,EAAGA,EAAQP,EAAOtH,WAAWpK,OAAQiS,IACrD,CACE,IAAIC,EAAU/J,EAAI6J,YAAY,GAK1BG,EAHaxK,OAAO+J,EAAOrH,YAAY4H,IACzBtK,OAAO+J,EAAOpH,gBAAgB2H,IAI5CG,EAASV,EAAO/G,UAAUsH,GAAOtJ,GAAK8C,SAG1C,OAFAyG,EAAQ3B,UAAY6B,EAEZD,GACN,KAAK,EACHD,EAAQ3B,UAAY,GACpB,MACF,KAAK,EACH2B,EAAQ3B,UAAY6B,EAAOC,eAAe,SAC1C,MACF,KAAK,EACHH,EAAQ3B,UAAY5I,OAAOyK,GAAQC,oBAAetU,EAAU,CAACuU,MAAO,UAAWC,sBAAsB,IACrG,MACF,KAAK,EAEDL,EAAQ3B,UADK,IAAV6B,EACiBzK,OAAOyK,GAAQI,QAAQ,GAGvB,MAEtB,MACF,KAAK,EACHN,EAAQ3B,UAAY6B,EAI1B,CACF,CAEA,IAAIK,EAAOb,EAAUG,WAAW,GAC5BW,EAASD,EAAKT,YAAY,GAC9BU,EAAOC,QAAU,IACjBD,EAAOnC,UAAY,kBAEnB,IAAI,IAAI0B,EAAQ,EAAGA,EAAQP,EAAOtH,WAAWpK,OAAQiS,IACrD,CAEE,IAAIW,EAAajL,OAAO+J,EAAOrH,YAAY4H,IACvCG,EAASV,EAAOjH,iBAAiBwH,GACjCY,EAAQJ,EAAKT,YAAY,GAE7B,OAAQY,GACN,KAAK,EA4BL,KAAK,EACHC,EAAMtC,UAAY6B,EAClB,MA3BF,KAAK,EACY,IAAVA,GACHA,EAASzK,OAAOyK,GAAQI,QAAQ,GAChCK,EAAMtC,UAAY5I,OAAOyK,GAAQC,eAAe,UAGhDQ,EAAMtC,UAAY,MAEpB,MACF,KAAK,EAEHsC,EAAMtC,UADS,IAAV6B,EACazK,OAAOyK,GAAQC,oBAAetU,EAAU,CAACuU,MAAO,UAAWC,sBAAsB,IAG/E,MAEpB,MACF,KAAK,EAEDM,EAAMtC,UADO,IAAV6B,EACezK,OAAOyK,GAAQI,QAAQ,GAGvB,MAO1B,CAEF,CAldAM,OAAOC,SAAQ,WAEf,IAEAD,OAAOE,WAAa,WAClBrT,SAAS2Q,eAAe,oBAAoB2C,QAAUC,YACtDvT,SAAS2Q,eAAe,UAAU2C,QAAU,WAAY7E,iBAAkBC,iBAAkB,EAC5F1O,SAAS2Q,eAAe,iBAAiB2C,QAAU5E,gBAEnD9B,MAAMC,IAAG,eAAA2G,EAAA3M,kBAAA/F,sBAAAqE,MAAC,SAAAsO,EAAMzG,GAAO,OAAAlM,sBAAAa,MAAA,SAAA+R,GAAA,cAAAA,EAAA9N,KAAA8N,EAAAxP,MAAA,OAES,OADlB8I,EAAQe,SAASC,WAAWC,QAAQ,2BAC1C0F,UAAUC,IAAItH,UAAUoH,EAAAxP,KAAA,EAExB8I,EAAQE,OAAM,OACpBmB,QAAQC,IAAI,0DAA0D,wBAAAoF,EAAA3N,OAAA,GAAA0N,EAAA,KACvE,gBAAAI,GAAA,OAAAL,EAAAvM,MAAA,KAAAD,UAAA,EANQ,GAOX,EA6cA,IACQ8M,aAAY,WAChB,SAAAA,IAAc3M,gBAAA,KAAA2M,GACZ1U,KAAKmJ,KAAO,EACd,CAwFC,OAvFDZ,aAAAmM,EAAA,EAAAlV,IAAA,UAAAqC,MACA,SAAQ8S,EAAMC,EAAaC,EAAWC,GACpC,IAAIC,EAAU,CACZC,MAAO,OAASL,EAChBxL,KAAMyL,EAAyB,YAAED,GAAM,kBAAkBjO,MAAM,EAAE,IACjEuO,MAAO,EACPpS,KAAM,MACNqS,MAAO,aACPC,QAAS,WACTC,gBAAiBP,EACjBQ,YAAaP,EACbQ,WAAYV,EAAwB,WAAED,IAGxC3U,KAAKmJ,KAAK7D,KAAKyP,GACf9F,QAAQC,IAAI,6BACd,GAAC,CAAA1P,IAAA,iBAAAqC,MACD,SAAe8S,EAAMY,EAAcV,EAAWC,GAC5C,IAAIC,EAAU,CACZC,MAAO,OAASL,EAChBxL,KAAMoM,EAAa,iBAAiB7O,MAAM,EAAE,IAC5CuO,MAAO,EACPpS,KAAM,MACNqS,MAAO,aACPC,QAAS,WACTC,gBAAiBP,EACjBQ,YAAaP,GAGf9U,KAAKmJ,KAAK7D,KAAKyP,GACf9F,QAAQC,IAAI,6BACd,GAAC,CAAA1P,IAAA,iBAAAqC,MACD,SAAe2T,EAAYV,GACzB,IAAIC,EAAU,CACZC,MAAO,oBACP7L,KAAMqM,EAAW9O,MAAM,EAAE,IACzBuO,MAAO,EACPpS,KAAM,OACN4S,WAAY,CAAC,GAAI,GACjBP,MAAO,UACPC,QAAS,WACTO,QAAQ,EACRN,gBAAiB,cACjBC,YAAaP,GAGf9U,KAAKmJ,KAAK7D,KAAKyP,GACf9F,QAAQC,IAAI,iCACd,GAAC,CAAA1P,IAAA,gBAAAqC,MACD,SAAciT,GACZ,IAAIC,EAAU,CACZC,MAAO,kBACP7L,KAAMwM,gBAAgB,IACtBV,MAAO,EACPpS,KAAM,OACN4S,WAAY,CAAC,GAAI,GACjBP,MAAO,SACPC,QAAS,WAETC,gBAAiB,cACjBC,YAAaP,GAIXc,EAAW5V,KAAKmJ,KAAK0M,QAAO,SAAAC,GAAI,MAAmB,oBAAfA,EAAKd,KAA2B,IACxEhV,KAAKmJ,KAAOyM,EAGZ,IADA,IAAIG,EAASJ,gBAAgB,IACpBzU,EAAI,EAAGA,EAAIlB,KAAW,KAAEiB,OAAQC,IACvC,GAAgC,cAA5BlB,KAAW,KAAEkB,GAAU,MACzB,IAAK,IAAI8U,EAAI,EAAGA,EAAIhW,KAAW,KAAEkB,GAAS,KAAED,OAAQ+U,IAClDD,EAAOC,IAAMpN,OAAO5I,KAAW,KAAEkB,GAAS,KAAE8U,IAIlD,IAAK,IAAIC,EAAI,EAAGA,EAAIjW,KAAW,KAAEiB,OAAQgV,IACvC,GAAgC,WAA5BjW,KAAW,KAAEiW,GAAU,MACzB,IAAK,IAAI/W,EAAI,EAAGA,EAAI,GAAIA,IAClB0J,OAAO5I,KAAW,KAAEiW,GAAS,KAAE/W,IAAM,IACvC6V,EAAc,KAAE7V,GAAK0J,OAAOmN,EAAO7W,IAAI0J,OAAO5I,KAAW,KAAEiW,GAAS,KAAE/W,KAM9Ec,KAAKmJ,KAAK7D,KAAKyP,GACf9F,QAAQC,IAAI,8BACd,KAACwF,CAAA,CA3Fe,GA+FdwB,YAAc,IAAIxB,aAClByB,mBAAqB,IAAIzB,aACzB0B,eAAiB,IAAI1B,aACrB2B,aAAezV,SAAS2Q,eAAe,YACvC+E,aAAe1V,SAAS2Q,eAAe,eACvCgF,OAASF,aAAaG,WAAW,MACjCC,OAASH,aAAaE,WAAW,MACjCE,YAAc,EAClBC,MAAMC,SAASC,OAAOC,SAASC,UAAUC,YAAc,EAGvD,IAAMC,qBAAuB,CAC3B,2BACA,0BACA,2BACA,0BACA,0BACA,0BACA,2BAGIC,wBAA0B,CAC9B,oBACA,oBACA,qBACA,oBACA,qBACA,oBACA,oBACA,qBAiEF,SAASC,eAAeC,EAAWC,EAAUC,GAC/B1W,SAAS2Q,eAAe6F,GAAWZ,WAAW,MAE1D,IAFA,IACIe,EAAU,GACLrW,EAAI,EAAGA,EAAImW,EAAS,GAAS,KAAEpW,OAAQC,IAC9CqW,EAAQjS,KAAKsD,OAAO0O,GAAepW,GAErCyV,MAAMa,OAAOlX,UAAUmX,SAAW,WAChCzX,KAAK0X,OAAS1X,KAAK0X,OAAS,EAC9B,EACA,IAAMC,EAAW,IAAIhB,MAAMS,EAAU,CACnCvU,KAAM,MACNsG,KAAM,CACFyO,OAAQL,EACRM,SAAUR,GAEdjZ,QAAS,CACP0Z,OAAQ,CAER,EACAC,OAAQ,CACNC,MAAO,CAAC,CAAEC,SAAS,IACnBC,MAAO,CAAC,CAAEC,GAAI,WACZC,SAAU,OACVH,SAAS,EACTI,MAAO,CACLC,SAAU,SAAUzW,EAAO0W,EAAO/U,GAEhC,MAAO,IAAM3B,EAAMyR,gBACrB,IAGJ,CAAE6E,GAAI,WACJC,SAAU,QAEVC,MAAO,CACLC,SAAU,SAAUzW,EAAO0W,EAAO/U,GAEhC,OAA+F,IAAvF3B,EAAMyR,oBAAetU,EAAW,CAAEwU,sBAAuB,EAAGgF,sBAAuB,IAAW,GACxG,EACAC,UAAW,OAEbC,UAAW,CAACC,iBAAiB,EAC3BC,MAAO,MACPC,UAAW,MAIjBC,SAAU,CACRC,UAAW,CACT/D,MAAO,SAAUgE,EAAa7P,GAC5B,MAA8D,UAA1DA,EAAe,SAAE6P,EAA0B,cAAU,MACqD,IAApGA,EAAYC,OAAO3F,oBAAetU,EAAW,CAAEwU,sBAAuB,EAAGgF,sBAAuB,IAAW,IAE5G,IAAMQ,EAAYC,OAAO3F,gBAEpC,IAGJ4F,QAAS,SAASC,EAAKrC,GACjBA,GAAYA,EAAS7V,OAAS,IAChCmY,sBACAtC,EAASpT,SAAQ,SAAS2V,GACxB,IAAIC,EAAeD,EAAQE,cACvBhB,EAAQc,EAAQG,OAChB3X,EAAQ8V,EAASxO,KAAK0O,SAASyB,GAAcnQ,KAAKoP,GACtDtJ,QAAQC,IAAI,wBAA0BqJ,EAAQ,eAAiB1W,GACb,cAA9C8V,EAASxO,KAAK0O,SAASyB,GAAcpE,OACvCuE,uBAAuB9B,EAASxO,KAAK0O,SAASyB,GAAchE,WAAYiD,EAE5E,IAGJ,KAMa,YAAbnB,EACFjX,OAAOwX,SAAWA,EACI,eAAbP,IACTjX,OAAOuZ,YAAc/B,EAGzB,CAEA,SACegC,iBAAc,OAAAC,gBAAA/R,MAAC,KAADD,UAAA,CAuF7B,SAAAgS,kBAFC,OAEDA,gBAAAnS,kBAAA/F,sBAAAqE,MAvFA,SAAA8T,IAAA,OAAAnY,sBAAAa,MAAA,SAAAuX,GAAA,cAAAA,EAAAtT,KAAAsT,EAAAhV,MAAA,cAAAgV,EAAAtT,KAAA,EAAAsT,EAAAhV,KAAA,EAEU0I,MAAMC,IAAG,eAAAsM,EAAAtS,kBAAA/F,sBAAAqE,MAAC,SAAAiU,EAAOpM,GAAO,IAAAW,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApR,EAAA5J,EAAA6M,EAAAoO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxZ,sBAAAa,MAAA,SAAA4Y,GAAA,cAAAA,EAAA3U,KAAA2U,EAAArW,MAAA,OAqB5B,OAnBIyJ,EAAUX,EAAQe,SAASC,WAAWC,QAAQ,2BAC9CoL,EAAerM,EAAQe,SAASC,WAAWC,QAAQ,2BAEjDqL,EAAiB,EACjBC,EAAc5L,EAAQO,SAAS,cAC/BsL,EAAgBH,EAAanL,SAAS,aACtCuL,EAAmBJ,EAAanL,SAAS,UACzCwL,EAAa,CAAC,GAAI,KAQxBH,EAAYpL,KAAK,UACjBqL,EAAcrL,KAAK,0CACnBsL,EAAiBtL,KAAK,0CAEtBoM,EAAArW,KAAA,GACM8I,EAAQE,OAAM,QAWpB,IAPesM,EAAc5W,OAGvB+W,EAAe,GACfC,EAAkB,GAGfpR,EAAM,EAAGA,EAAMgR,EAAc5W,OAAOvC,OAAQmI,IAC7C5J,EAAM4a,EAAc5W,OAAO4F,GAAK8Q,GAClCC,EAAY3W,QAAUhE,GACxB+a,EAAajV,KAAK8D,GAKtB,IAASiD,EAAM,EAAGA,EAAM+N,EAAcgB,YAAa/O,IAC3CoO,EAASJ,EAAiB7W,OAAO,GAAG6I,GACtCiO,EAAWe,SAASZ,IACtBD,EAAgBlV,KAAK+G,GAQzB,IAHMqO,EAAe,CAAC,EAGtBC,EAAA,EAAAC,EAAkBJ,EAAeG,EAAAC,EAAA3Z,OAAA0Z,IAAE,CAAxBtO,EAAGuO,EAAAD,GAENG,EAAWlS,OAAOyR,EAAiB7W,OAAO,GAAG6I,IACnDqO,EAAaI,GAAYJ,EAAaI,IAAa,EAAEC,EAAAO,2BAEnCf,GAAY,IAA9B,IAAAQ,EAAA7X,MAAA8X,EAAAD,EAAA5b,KAAAgF,MAAWiF,EAAG4R,EAAAnZ,MACRsY,EAAY3W,QAAU4W,EAAc5W,OAAO4F,GAAK8Q,KAC5CgB,EAAetS,OAAOwR,EAAc5W,OAAO4F,GAAKiD,IACjD3G,MAAMwV,KACTR,EAAaI,IAAaI,GAI/B,OAAApT,GAAAiT,EAAA7a,EAAA4H,EAAA,SAAAiT,EAAA9X,GAAA,CACH,CAGA,OAAAkY,EAAArW,KAAA,GACM8I,EAAQE,OAAM,QACpBmB,QAAQC,IAAI,iCAADvQ,OAAkCyb,EAAcpL,QAAO,MAClEC,QAAQC,IAAI,kBAADvQ,OAAmBwb,EAAY3W,OAAM,MAEhDyL,QAAQC,IAAI,kBACZxP,OAAO2G,KAAKqU,GAAchX,SAAQ,SAACoX,GACjC7L,QAAQC,IAAI,GAADvQ,OAAImc,EAAQ,MAAAnc,OAAK+b,EAAaI,IAC3C,IAAG,yBAAAK,EAAAxU,OAAA,GAAAqT,EAAA,KAEJ,gBAAAuB,GAAA,OAAAxB,EAAAlS,MAAA,KAAAD,UAAA,EA/Ec,IA+Eb,OAAAkS,EAAAhV,KAAA,eAAAgV,EAAAtT,KAAA,EAAAsT,EAAAtK,GAAAsK,EAAA,SAEF7K,QAAQzH,MAAKsS,EAAAtK,IAAQ,wBAAAsK,EAAAnT,OAAA,GAAAkT,EAAA,kBAExBD,gBAAA/R,MAAA,KAAAD,UAAA,UAGc4T,iBAAc,OAAAC,gBAAA5T,MAAC,KAADD,UAAA,CAoG7B,SAAA6T,kBAFC,OAEDA,gBAAAhU,kBAAA/F,sBAAAqE,MApGA,SAAA2V,IAAA,OAAAha,sBAAAa,MAAA,SAAAoZ,GAAA,cAAAA,EAAAnV,KAAAmV,EAAA7W,MAAA,cAAA6W,EAAAnV,KAAA,EAAAmV,EAAA7W,KAAA,EAEU0I,MAAMC,IAAG,eAAAmO,EAAAnU,kBAAA/F,sBAAAqE,MAAC,SAAA8V,EAAOjO,GAAO,IAAAW,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAsB,EAAA1S,EAAA5J,EAAA6M,EAAAoO,EAAAC,EAAAqB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxB,EAAAI,EAAA,OAAAxZ,sBAAAa,MAAA,SAAAga,GAAA,cAAAA,EAAA/V,KAAA+V,EAAAzX,MAAA,OAqB5B,OAnBIyJ,EAAUX,EAAQe,SAASC,WAAWC,QAAQ,2BAC9CoL,EAAerM,EAAQe,SAASC,WAAWC,QAAQ,2BAEjDqL,EAAiB,EACjBC,EAAc5L,EAAQO,SAAS,cAC/BsL,EAAgBH,EAAanL,SAAS,aACtCuL,EAAmBJ,EAAanL,SAAS,UACzCwL,EAAa,CAAC,GAAI,KAQxBH,EAAYpL,KAAK,UACjBqL,EAAcrL,KAAK,0CACnBsL,EAAiBtL,KAAK,0CAEtBwN,EAAAzX,KAAA,GACM8I,EAAQE,OAAM,QAYpB,IAResM,EAAc5W,OAGvB+W,EAAe,GACfC,EAAkB,GAGlBsB,EAAe,CAAC,EACb1S,EAAM,EAAGA,EAAMgR,EAAc5W,OAAOvC,OAAQmI,IAC7C5J,EAAM4a,EAAc5W,OAAO4F,GAAK8Q,GAClCC,EAAY3W,QAAUhE,IACxB+a,EAAajV,KAAK8D,GAClB0S,EAAa1B,EAAc5W,OAAO4F,GAAK,IAAM0S,EAAa1B,EAAc5W,OAAO4F,GAAK,KAAO,GAK/F,IAASiD,EAAM,EAAGA,EAAM+N,EAAcgB,YAAa/O,IAC3CoO,EAASJ,EAAiB7W,OAAO,GAAG6I,GACtCiO,EAAWe,SAASZ,IACtBD,EAAgBlV,KAAK+G,GAQzB,IAHMqO,EAAe,CAAC,EAGtBqB,EAAA,EAAAC,EAAkBzB,EAAYwB,EAAAC,EAAA/a,OAAA8a,IAAE,CAArB3S,EAAG4S,EAAAD,GACNG,EAActT,OAAOwR,EAAc5W,OAAO4F,GAAK,IAC/C+S,EAAY,CAAC,EAAIC,EAAAd,2BAELd,GAAe,IAAjC,IAAA4B,EAAAlZ,MAAAmZ,EAAAD,EAAAjd,KAAAgF,MAAWkI,EAAGgQ,EAAAxa,MAENiZ,EAAWlS,OAAOyR,EAAiB7W,OAAO,GAAG6I,IACnDqO,EAAaI,GAAYJ,EAAaI,IAAa,EAC/CX,EAAY3W,QAAU4W,EAAc5W,OAAO4F,GAAK8Q,KAC5CgB,EAAetS,OAAOwR,EAAc5W,OAAO4F,GAAKiD,IACjD3G,MAAMwV,KACTR,EAAaI,IAAaI,EAC1BiB,EAAUrB,GAAYI,GAI3B,OAAApT,GAAAsU,EAAAlc,EAAA4H,EAAA,SAAAsU,EAAAnZ,GAAA,CACD6Y,EAAaI,GAAeC,CAE9B,CAGA,OAAAI,EAAAzX,KAAA,GACM8I,EAAQE,OAAM,QACpBmB,QAAQC,IAAI,iCAADvQ,OAAkCyb,EAAcpL,QAAO,MAClEC,QAAQC,IAAI,kBAADvQ,OAAmBwb,EAAY3W,OAAM,MAEhDyL,QAAQC,IAAI,kBACZxP,OAAO2G,KAAKqU,GAAchX,SAAQ,SAACoX,GACjC7L,QAAQC,IAAI,cAADvQ,OAAemc,EAAQ,YAAAnc,OAAW+b,EAAaI,IAC5D,IACApb,OAAO2G,KAAKyV,GAAcpY,SAAQ,SAAClE,GACjCE,OAAO2G,KAAKyV,EAAatc,IAAMkE,SAAQ,SAAC8Y,GACtCvN,QAAQC,IAAI,OAADvQ,OAAQa,EAAG,iBAAAb,OAAgB6d,EAAK,MAAA7d,OAAKmd,EAAatc,GAAKgd,IACpE,GACF,IACAvN,QAAQC,IAAI4M,GAAc,yBAAAS,EAAA5V,OAAA,GAAAkV,EAAA,KAE3B,gBAAAY,GAAA,OAAAb,EAAA/T,MAAA,KAAAD,UAAA,EA5Fc,IA4Fb,OAAA+T,EAAA7W,KAAA,eAAA6W,EAAAnV,KAAA,EAAAmV,EAAAnM,GAAAmM,EAAA,SAEF1M,QAAQzH,MAAKmU,EAAAnM,IAAQ,wBAAAmM,EAAAhV,OAAA,GAAA+U,EAAA,kBAExBD,gBAAA5T,MAAA,KAAAD,UAAA,UAGc0H,kBAAe,OAAAoN,iBAAA7U,MAAC,KAADD,UAAA,CAsDhC,SAAA8U,mBAJG,OAIHA,iBAAAjV,kBAAA/F,sBAAAqE,MAtDE,SAAA4W,IAAA,OAAAjb,sBAAAa,MAAA,SAAAqa,GAAA,cAAAA,EAAApW,KAAAoW,EAAA9X,MAAA,cAAA8X,EAAApW,KAAA,EAAAoW,EAAA9X,KAAA,EAEU0I,MAAMC,IAAG,eAAAoP,EAAApV,kBAAA/F,sBAAAqE,MAAC,SAAA+W,EAAOlP,GAAO,IAAAmP,EAAA7b,EAAA,OAAAQ,sBAAAa,MAAA,SAAAya,GAAA,cAAAA,EAAAxW,KAAAwW,EAAAlY,MAAA,OACH,OAArBiY,EAAW,IAAIE,OAAMD,EAAAlY,KAAA,EACnBiY,EAASG,WAAU,cAAAF,EAAAlY,KAAA,EACnBiY,EAASI,eAAc,OAC7BlO,QAAQC,IAAI,uCACZD,QAAQC,IAAI6N,GAEZ7G,YAAY/M,KAAKiU,OAAO,GACpBlc,EAAI,EACRxB,OAAO2G,KAAK0W,EAAsB,aAAGrZ,SAAQ,SAAClE,GAC5C0W,YAAYmH,QAAQ7d,EAAKud,EAAU9F,qBAAqB/V,EAAI,GAAIgW,wBAAwBhW,EAAI,IAC5FA,GAAQ,CACV,IAGAgV,YAAYoH,eAAeP,EAASQ,YAAYC,SAAU,SAC1DtH,YAAYuH,cAAc,OAE1BtH,mBAAmBhN,KAAKiU,OAAO,GAE/Blc,EAAI,EACJxB,OAAO2G,KAAK0W,EAAsB,aAAGrZ,SAAQ,SAAClE,GAC5C2W,mBAAmBuH,eAAele,EAAKud,EAAsB,YAAEvd,GAAMyX,qBAAqB/V,EAAI,GAAIgW,wBAAwBhW,EAAI,IAC9HA,GAAQ,CACV,IACAyc,cAAc,kBAAkB,YAChCpH,OAAOqH,UAAU,EAAG,EAAGvH,aAAawH,MAAOxH,aAAaqB,QACxDP,eAAe,WAAYjB,YAAY/M,KAAM4T,EAASe,UACtD1H,eAAejN,KAAKiU,OAAO,GAC3Blc,EAAI,EACJxB,OAAO2G,KAAK0W,EAAsB,aAAGrZ,SAAQ,SAAClE,GAC5C4W,eAAeiH,QAAQ7d,EAAKud,EAAU9F,qBAAqB/V,EAAI,GAAIgW,wBAAwBhW,EAAI,IAC/FA,GAAQ,CACV,IACAkV,eAAekH,eAAeP,EAASQ,YAAYC,SAAU,SAC7DpH,eAAeqH,cAAc,OAC7BE,cAAc,kBAAkB,eAChClH,OAAOmH,UAAU,EAAG,EAAGtH,aAAauH,MAAOvH,aAAaoB,QACxDP,eAAe,cAAef,eAAejN,KAAM4T,EAASe,UAE5DC,iBAGA,yBAAAf,EAAArW,OAAA,GAAAmW,EAAA,KACD,gBAAAkB,GAAA,OAAAnB,EAAAhV,MAAA,KAAAD,UAAA,EA5Cc,IA4Cb,OAAAgV,EAAA9X,KAAA,eAAA8X,EAAApW,KAAA,EAAAoW,EAAApN,GAAAoN,EAAA,SAEF3N,QAAQzH,MAAKoV,EAAApN,IAAQ,wBAAAoN,EAAAjW,OAAA,GAAAgW,EAAA,kBAExBD,iBAAA7U,MAAA,KAAAD,UAAA,CAnYF+O,MAAMsH,QAAQC,SAAS,CACtBC,kBAAmB,SAAUC,EAAOC,GAClC,IAAIC,EAAMF,EAAME,IACZC,EAAgB,EAEpBH,EAAMjV,KAAKyO,OAAOlU,SAAQ,SAAUsR,EAAOwJ,GACzC,IAAIC,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAe,CAAC,EAAG,EAAG,GAE1BN,EAAMjV,KAAK0O,SAASnU,SAAQ,SAAUib,EAASrF,GAClC8E,EAAMQ,eAAetF,GACtB5D,QAA0B,OAAhBiJ,EAAQ9b,MAAiC,cAAhB8b,EAAQzJ,QACnDuJ,EAAM,IAAME,EAAQxV,KAAKqV,GACzBE,EAAa,GAAKpF,EAMtB,IACAiF,GAAiBE,EAAM,GAGvB,IAAII,EAAOT,EAAMQ,eAAeF,EAAa,IAAIvV,KAAKqV,GAAYM,OAAOC,EACrEC,EAAOZ,EAAMQ,eAAeF,EAAa,IAAIvV,KAAKqV,GAAYM,OAAO3b,EAAI,EAC7Emb,EAAIW,OACJX,EAAIY,UAAUL,EAAMG,GACpBV,EAAIa,QAAQC,KAAKC,GAAK,GACtBf,EAAIgB,UAAY,QAChBhB,EAAIiB,KAAO,aACXjB,EAAIkB,UAAY,SAChBlB,EAAImB,SAAShB,EAAM,GAAGiB,WAAWte,QAAQ,wBAAyB,KAAM,EAAG,GAC3Ekd,EAAIqB,SAgBN,IAEArB,EAAIW,OACJX,EAAIgB,UAAY,QAChBhB,EAAIiB,KAAO,aACXjB,EAAIkB,UAAY,QAChBlB,EAAIsB,aAAe,MACnBtB,EAAImB,SAAS,uBAAD9gB,OAAwB4f,EAAcjL,kBAAoB8K,EAAMP,MAAQ,GAAI,IACxFS,EAAIqB,SACN,IA0UC,IAKK1C,OAAM,WACV,SAAAA,IAAclV,gBAAA,KAAAkV,GACZjd,KAAKma,YAAc,EACnBna,KAAK8d,SAAW,EAChB9d,KAAK6f,aAAe,EACpB7f,KAAK8f,gBAAkB,EACvB9f,KAAK+f,MAAQ,GACb/f,KAAKsV,WAAa,CAAC,EACnBtV,KAAKggB,YAAc,CAAC,EACpBhgB,KAAKud,YAAc,CAAC,EACpBvd,KAAKigB,WAAa,EACpB,CA4CA,IAAAC,EA1CAC,EAqPC,OArPD5X,aAAA0U,EAAA,EAAAzd,IAAA,WAAAqC,OAAAse,EAAA1Y,kBAAA/F,sBAAAqE,MACA,SAAAqa,IAAA,IAAAC,EAAA,YAAA3e,sBAAAa,MAAA,SAAA+d,GAAA,cAAAA,EAAA9Z,KAAA8Z,EAAAxb,MAAA,cAAAwb,EAAA5b,OAAA,SACS,IAAI0B,QAAO,eAAAma,EAAA9Y,kBAAA/F,sBAAAqE,MAAC,SAAAya,EAAOzc,EAASqD,GAAM,OAAA1F,sBAAAa,MAAA,SAAAke,GAAA,cAAAA,EAAAja,KAAAia,EAAA3b,MAAA,cAAA2b,EAAAja,KAAA,EAAAia,EAAA3b,KAAA,EAE/B0I,MAAMC,IAAG,eAAAiT,EAAAjZ,kBAAA/F,sBAAAqE,MAAC,SAAA4a,EAAO/S,GAAO,IAAAgT,EAAArS,EAAAsS,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxf,sBAAAa,MAAA,SAAA4e,GAAA,cAAAA,EAAA3a,KAAA2a,EAAArc,MAAA,OAkB5B,OAhBI8b,EAAYhT,EAAQe,SAASC,WAAWC,QAAQ,WAChDN,EAAUX,EAAQe,SAASC,WAAWC,QAAQ,2BAC/BjB,EAAQe,SAASC,WAAWC,QAAQ,2BACnDgS,EAAcjT,EAAQe,SAASC,WAAWC,QAAQ,iBAChDiS,EAAMvS,EAAQO,SAAS,cACvBiS,EAAUH,EAAU9R,SAAS,gBAC7BkS,EAAQJ,EAAU9R,SAAS,iBAC3BmS,EAAYL,EAAU9R,SAAS,kBAC/BoS,EAAaL,EAAY/R,SAAS,OAGxCgS,EAAI/R,KAAK,UACTgS,EAAQhS,KAAK,UACbiS,EAAMjS,KAAK,UACXkS,EAAUlS,KAAK,UACfmS,EAAWnS,KAAK,UAChBoS,EAAArc,KAAA,GACM8I,EAAQE,OAAM,QAEpBuS,EAAKlG,YAAcvR,OAAOkY,EAAItd,QAC9B6c,EAAKvC,SAAWlV,OAAOmY,EAAQvd,QAAQ,EACvC6c,EAAKR,aAAejX,OAAOoY,EAAMxd,QACjC6c,EAAKP,gBAAkBlX,OAAOqY,EAAUzd,QAExC6c,EAAK9C,YAAYC,SAAW7H,gBAAgB,IAC5C0K,EAAK9C,YAAYC,SAAS,GAAK5U,OAAOsY,EAAW1d,QACjD6c,EAAK9C,YAAYC,SAAW4D,kBAAkBf,EAAK9C,YAAYC,SAAW,EAAI5U,OAAOyX,EAAKP,kBAAmB,yBAAAqB,EAAAxa,OAAA,GAAAga,EAAA,KAE9G,gBAAAU,GAAA,OAAAX,EAAA7Y,MAAA,KAAAD,UAAA,EA9Bc,IA8Bb,OACF7D,IAAU0c,EAAA3b,KAAA,eAAA2b,EAAAja,KAAA,EAAAia,EAAAjR,GAAAiR,EAAA,SAERrZ,EAAMqZ,EAAAjR,IAAQ,wBAAAiR,EAAA9Z,OAAA,GAAA6Z,EAAA,kBAEnB,gBAAAc,EAAAC,GAAA,OAAAhB,EAAA1Y,MAAA,KAAAD,UAAA,EArCiB,KAqChB,wBAAA0Y,EAAA3Z,OAAA,GAAAyZ,EAAA,KACH,kBAAAD,EAAAtY,MAAA,KAAAD,UAAA,IAED,CAAApI,IAAA,eAAAqC,OAAAqe,EAAAzY,kBAAA/F,sBAAAqE,MACA,SAAAyb,IAAA,IAAAC,EAAA,YAAA/f,sBAAAa,MAAA,SAAAmf,GAAA,cAAAA,EAAAlb,KAAAkb,EAAA5c,MAAA,cAAA4c,EAAAhd,OAAA,SACS,IAAI0B,QAAO,eAAAub,EAAAla,kBAAA/F,sBAAAqE,MAAC,SAAA6b,EAAO7d,EAASqD,GAAM,OAAA1F,sBAAAa,MAAA,SAAAsf,GAAA,cAAAA,EAAArb,KAAAqb,EAAA/c,MAAA,cAAA+c,EAAArb,KAAA,EAAAqb,EAAA/c,KAAA,EAE/B0I,MAAMC,IAAG,eAAAqU,EAAAra,kBAAA/F,sBAAAqE,MAAC,SAAAgc,EAAOnU,GAAO,IAAAqM,EAAA+H,EAAA9H,EAAA+H,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9H,EAAAC,EAAAsB,EAAA1S,EAAA5J,EAAA8iB,EAAAjW,EAAAqO,EAAA6H,EAAAC,EAAAC,EAAAvG,EAAAC,EAAAuG,EAAAC,EAAAC,EAAA9H,EAAAI,EAAA,OAAAxZ,sBAAAa,MAAA,SAAAsgB,GAAA,cAAAA,EAAArc,KAAAqc,EAAA/d,MAAA,OAgB5B,OAdImV,EAAerM,EAAQe,SAASC,WAAWC,QAAQ,2BACnDmT,EAAiBpU,EAAQe,SAASC,WAAWC,QAAQ,4BACnDqL,EAAiB,EACjB+H,EAAsB,EACtBC,EAAWjI,EAAanL,SAAS,aACjCqT,EAAeH,EAAelT,SAAS,aACvCsT,EAAkBJ,EAAelT,SAAS,SAC1CuT,EAAY,CAAC,EAGnBH,EAASnT,KAAK,0CACdoT,EAAapT,KAAK,0CAClBqT,EAAgBrT,KAAK,0CAErB8T,EAAA/d,KAAA,GACM8I,EAAQE,OAAM,QAQpB,IALMyM,EAAe,GACfC,EAAkB,GAGlBsB,EAAe,CAAC,EACb1S,EAAM,EAAGA,EAAM8Y,EAAS1e,OAAOvC,OAAQmI,IACxC5J,EAAMoJ,OAAOsZ,EAAS1e,OAAO4F,GAAK8Q,IACpCuH,EAAKtH,aAAe3a,IACtBsc,EAAaoG,EAAS1e,OAAO4F,GAAK,IAAM0S,EAAaoG,EAAS1e,OAAO4F,GAAK,KAAO,EACjFiZ,EAAUH,EAAS1e,OAAO4F,GAAK,IAAM,IAUzC,IANA1J,OAAO2G,KAAKyV,GAAcpY,SAAQ,SAAClE,GACjCiiB,EAAK1B,MAAMza,KAAK9F,EAClB,IAIS4J,EAAM,EAAGA,EAAM+Y,EAAa3e,OAAOvC,OAAQmI,IACtC+Y,EAAa3e,OAAO4F,GAAK6Y,KAC1BnG,GACTvB,EAAajV,KAAK8D,GAKtB,IAASiD,EAAM,EAAGA,EAAM8V,EAAa/G,YAAa/O,IACjC+V,EAAgB5e,OAAO,GAAG6I,GACzCmO,EAAgBlV,KAAK+G,GAOvB,IAHMqO,EAAe,CAAC,EAGtB6H,EAAA,EAAAC,EAAkBjI,EAAYgI,EAAAC,EAAAvhB,OAAAshB,IAAE,CAArBnZ,EAAGoZ,EAAAD,GACNrG,EAActT,OAAOuZ,EAAa3e,OAAO4F,GAAK,IAC9C+S,EAAY,CAAC,EAAIuG,EAAApH,2BAELd,GAAe,IAAjC,IAAAkI,EAAAxf,MAAAyf,EAAAD,EAAAvjB,KAAAgF,MAAWkI,EAAGsW,EAAA9gB,MAENiZ,EAAWsH,EAAgB5e,OAAO,GAAG6I,GAC3CqO,EAAaI,GAAYJ,EAAaI,IAAa,EAC7CI,EAAetS,OAAOuZ,EAAa3e,OAAO4F,GAAKiD,IAChD3G,MAAMwV,KACTR,EAAaI,IAAaI,GAE5BiB,EAAUrB,GAAYqH,EAAa3e,OAAO4F,GAAKiD,EAChD,OAAAvE,GAAA4a,EAAAxiB,EAAA4H,EAAA,SAAA4a,EAAAzf,GAAA,CACDof,EAAUnG,GAAa5W,KAAK6W,EAC9B,CAAC,OAAA0G,EAAA/d,KAAA,GAEK8I,EAAQE,OAAM,QAMpB4I,YAAc+K,EAAK5B,aAGnB4B,EAAKnM,WAAa+M,EAClBZ,EAAKzB,YAAcyB,EAAKqB,cAAcT,EAAWZ,EAAK5B,aAAc4B,EAAK3B,iBACzE2B,EAAKzB,YAAcyB,EAAKsB,eAAetB,EAAKzB,YAAayB,EAAK5B,aAAc4B,EAAK3B,iBAAkB,yBAAA+C,EAAAlc,OAAA,GAAAob,EAAA,KAEpG,gBAAAiB,GAAA,OAAAlB,EAAAja,MAAA,KAAAD,UAAA,EAtFc,IAsFb,OACF7D,IAAU8d,EAAA/c,KAAA,eAAA+c,EAAArb,KAAA,EAAAqb,EAAArS,GAAAqS,EAAA,SAER5S,QAAQzH,MAAKqa,EAAArS,IAAQ,wBAAAqS,EAAAlb,OAAA,GAAAib,EAAA,kBAE1B,gBAAAqB,EAAAC,GAAA,OAAAvB,EAAA9Z,MAAA,KAAAD,UAAA,EA7FiB,KA6FhB,wBAAA8Z,EAAA/a,OAAA,GAAA6a,EAAA,KACH,kBAAAtB,EAAArY,MAAA,KAAAD,UAAA,IAED,CAAApI,IAAA,gBAAAqC,MACA,SAAcwgB,EAAWrB,EAAOmC,GAAa,IAAAC,EAAA,KAC3C,IAEE,IAAMrD,EAAQ,CAAC,EAyDf,OAtDArgB,OAAO2G,KAAKgc,GAAW3e,SAAQ,SAAC2f,GAC9B,IAAIC,EAAW,CAAC,gBAAiB3N,gBAAgB,IAAK,iBAAkBA,gBAAgB,KAClF4N,EAAYlB,EAAUgB,GAG5B,IAAK,IAAMrN,KAAKuN,EAAW,CAEzB,IAAMC,EAAYD,EAAUvN,GACxByN,EAAW,CAAC,gBAAiB9N,gBAAgB,IAAK,iBAAkBA,gBAAgB,KACxFyN,EAAiB,WAAEC,GAAUrN,GAAgB,YAAIL,gBAAgB,IACjEyN,EAAiB,WAAEC,GAAUrN,GAAgB,YAAIL,gBAAgB,IACjE,IAAK,IAAIzU,EAAI,EAAGA,EAAIke,KAAKsE,IAAI9a,OAAO4a,EAAwB,cAAI,GAAItiB,IAAK,CACvE,GAAS,GAALA,EACFuiB,EAAS,iBAAiBviB,GAAKsiB,EAAyB,cACxDC,EAAS,kBAAkBviB,GAAKsiB,EAAyB,cACzDJ,EAAiB,WAAEC,GAAUrN,GAAgB,YAAE9U,GAAK0H,OAAO4a,EAAyB,eACpFJ,EAAiB,WAAEC,GAAUrN,GAAgB,YAAE9U,GAAK0H,OAAO4a,EAAyB,mBAC/E,CACL,IAAIG,EAAS3C,EAC6B,OAAtCwC,EAAiC,wBACnCG,GAAW,EAAI3C,IAAU,EAAImC,GAAgB,GAE/C,IACIS,EADEC,EAAkBzE,KAAK0E,MAAMlb,OAAO6a,EAAS,iBAAiBviB,EAAI,KAAO,EAAI8f,GAASpY,OAAO6a,EAAS,kBAAkBviB,EAAI,IAAMke,KAAK2E,IAAI,EAAI/C,EAAO,KAG1J4C,EADsC,OAApCJ,EAA+B,oBACf,EAEApE,KAAK0E,MAAME,OAAOL,EAAO/a,OAAO4a,EAAgC,sBAAG5a,OAAO4a,EAAwB,cAAKtiB,EAAE0H,OAAO4a,EAAmC,yBAAGK,EAAkBzE,KAAK2E,IAAI,EAAI/C,EAAO,IAAKpY,OAAO4a,EAA6B,qBAGpP9d,MAAMme,KACTJ,EAAS,iBAAiBviB,GAAK2iB,EAC/BT,EAAiB,WAAEC,GAAUrN,GAAgB,YAAE9U,GAAK2iB,GAEjDne,MAAMke,KACTH,EAAS,kBAAkBviB,GAAK0iB,EAChCR,EAAiB,WAAEC,GAAUrN,GAAgB,YAAE9U,GAAK0iB,EAExD,CAEAN,EAAS,iBAAiBpiB,IAAMuiB,EAAS,iBAAiBviB,GAC1DoiB,EAAS,kBAAkBpiB,IAAMuiB,EAAS,kBAAkBviB,EAC9D,CAGF,CAGA6e,EAAMsD,GAAYtD,EAAMsD,IAAaC,CACvC,IAKOvD,CACT,CAAE,MAAOvY,GACPyH,QAAQzH,MAAMA,EAChB,CACF,GAEA,CAAAhI,IAAA,iBAAAqC,MACA,SAAeoiB,EAAcjD,EAAOmC,GAClC,IAEE,IAAIe,EAAgBD,EA8BpB,OA5BAvkB,OAAO2G,KAAK6d,GAAexgB,SAAQ,SAAC2f,GAMlC,IALA,IAAIc,EAAeD,EAAcb,GAAU,iBACvCe,EAAeF,EAAcb,GAAU,kBAGvCgB,GAAU,EACLnjB,EAAI,EAAGA,EAAI,GAAIA,IAClBmjB,GACFF,EAAajjB,GAAK,EAClBkjB,EAAaljB,GAAK,GAEb0H,OAAOub,EAAajjB,IAAM,GAAO0H,OAAOwb,EAAaljB,EAAE,IAAM,IAChEkjB,EAAaljB,EAAE,GAAKke,KAAK0E,MAAMlb,OAAOub,EAAajjB,EAAE,IAAMke,KAAK2E,IAAI,EAAI/C,EAAO,KAC/EmD,EAAajjB,GAAK,EAClBkjB,EAAaljB,GAAK,EAClBmjB,GAAU,GAMhBH,EAAcb,GAAU,iBAAmBa,EAAcb,GAAU,kBAAoBc,EACvFD,EAAcb,GAAU,kBAAoBa,EAAcb,GAAU,mBAAqBe,CAC3F,IAKOF,CACT,CAAE,MAAO1c,GACPyH,QAAQzH,MAAMA,EAChB,CACF,KAACyV,CAAA,CAlQS,GAuQZ,SAAStH,gBAAgB2O,GACvB,OAAO,IAAIC,MAAMD,GAAKE,KAAK,EAC7B,CAGA,SAASpD,kBAAkBqD,EAAMC,GAE/B,IADA,IAAIC,EAAO,GACFzjB,EAAI,EAAGA,EAAIujB,EAAKxjB,OAAQC,IACtB,GAALA,EACFyjB,EAAKrf,KAAK8Z,KAAK0E,MAAMW,EAAK,KAE1BE,EAAKrf,KAAK8Z,KAAK0E,MAAMlb,OAAO+b,EAAKzjB,EAAI,IAAI0H,OAAO8b,KAGpD,OAAOC,CACT,CAGA,SAASC,mBAAmBC,EAAY7D,EAAO8D,GAC7C,IACE,IAAIX,EAAexO,gBAAgB,IAC/ByO,EAAezO,gBAAgB,IAEnCwO,EAAa,GAAKvb,OAAOic,GACzBT,EAAa,GAAKhF,KAAK0E,MAAME,OAAOpb,OAAOoY,GAAQpY,OAAOkc,GAASlc,OAAOkc,GAAS,EAAGlc,OAAOub,EAAa,IAAM/E,KAAK2E,IAAI,EAAInb,OAAOoY,GAAQ,IAAM,IAIlJ,IAAK,IAAI9f,EAAI,EAAGA,EAAI0H,OAAOkc,GAAS5jB,IAClCijB,EAAajjB,GAAKke,KAAK0E,MAAMlb,OAAOub,EAAajjB,EAAE,KAAO,EAAI8f,GAASpY,OAAOwb,EAAaljB,EAAE,IAAMke,KAAK2E,IAAI,EAAI/C,EAAO,KACvHoD,EAAaljB,GAAKke,KAAK0E,MAAME,OAAOpb,OAAOoY,GAAOpY,OAAOkc,GAAQlc,OAAOkc,GAAU5jB,EAAE,EAAEijB,EAAajjB,GAAKke,KAAK2E,IAAI,EAAI/C,EAAO,IAAK,IAGnI,MAAO,CAAC+D,SAAUX,EAAcY,SAAUb,EAC5C,CAAE,MAAO3c,GACPyH,QAAQzH,MAAMA,EAChB,CACF,CAEA,SACeyd,QAAOC,EAAAC,GAAA,OAAAC,SAAAvd,MAAC,KAADD,UAAA,UAAAwd,WA4DrB,OA5DqBA,SAAA3d,kBAAA/F,sBAAAqE,MAAtB,SAAAsf,EAAuBC,EAAcC,GAAc,IAAArkB,EAAAskB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnkB,sBAAAa,MAAA,SAAAujB,GAAA,cAAAA,EAAAtf,KAAAsf,EAAAhhB,MAAA,OACjD,IAUE,IAJAmK,QAAQC,IAAIoW,GACZrW,QAAQC,IAAIqW,GAGHrkB,EAAI,EAAGA,EAAIkV,eAAqB,KAAEnV,OAAQC,IAC7CkV,eAAqB,KAAElV,GAAU,OAAKokB,IAGpCK,EAAWf,mBAAmBhc,OAAOuN,mBAAyB,KAAEjV,GAAS,KAAE,IAAKwV,YAAa6O,GAEjGE,EAAcE,EAASX,SACvBU,EAAcC,EAASZ,SACvB3O,eAAqB,KAAElV,GAAS,KAAEkc,OAAO,EAAG,KAC5CoI,EAAApP,eAAqB,KAAElV,GAAS,MAAE6kB,QAAOle,MAAA2d,EAAAQ,mBAAIN,IACvCE,EAAaxP,eAAqB,KAAElV,GAAe,WAAED,OACrD4kB,EAAiB,CACrBI,oBAAqB,IACrBC,WAAY,wBACZC,sBAAuB,MACvBC,aAAcb,EACdc,qBAAsB,MACtBC,qBAAsBf,EACtBgB,YAAa,EACbC,wBAAyB,EACzBC,0BAA2B7d,OAAOwN,eAAqB,KAAElV,GAAe,WAAE,GAAsB,mBAChGwlB,YAAa,EACbC,uBAAwB,MACxBC,UAAW,GACXC,kBAAmB,EACnBC,kBAAmBle,OAAOwN,eAAqB,KAAElV,GAAe,WAAE,GAAsB,mBACxF6lB,cAAe,EACfC,cAAe,EACfC,cAAe,EACfC,cAAe,EACfC,aAAc,EACdC,aAAc,EACdC,yBAA0Bze,OAAOwN,eAAqB,KAAElV,GAAe,WAAE,GAA6B,0BACtGomB,YAAa7B,EACb8B,YAAa7B,GAEftP,eAAqB,KAAElV,GAAe,WAAEkc,OAAO,EAAGwI,GAClDxP,eAAqB,KAAElV,GAAe,WAAEoE,KAAKugB,IAIjDzP,eAAeqH,cAAc,OAE7Btd,OAAOuZ,YAAYvQ,KAAK0O,SAAWzB,eAAejN,KAClDhJ,OAAOuZ,YAAY8N,QAErB,CAAE,MAAOhgB,GACPyH,QAAQzH,MAAMA,EAChB,CAAC,wBAAAse,EAAAnf,OAAA,GAAA0e,EAAA,MACFxd,MAAA,KAAAD,UAAA,CAGD,SAAS6f,cAAcC,GACrB,IAAIC,EAAkB/mB,SAAS2Q,eAAe,gBAE9CoW,EAAgBnW,UAAY,GAE5B,IAAK,IAAItQ,EAAI,EAAGA,EAAIwmB,EAAWzmB,OAAQC,IAAK,CAC1C,IAAI0mB,EAAShnB,SAASinB,cAAc,UACpCD,EAAO/lB,MAAQ6lB,EAAWxmB,GAC1B0mB,EAAOE,KAAOJ,EAAWxmB,GACzBymB,EAAgBI,YAAYH,EAC9B,CACF,CAEA,SAASI,iBAAiBC,GACxB,OAAO,IAAI7hB,SAAQ,SAACrC,EAASqD,GAE3B,IAAIugB,EAAkB/mB,SAAS2Q,eAAe0W,GAG1CN,EAKF5jB,EAHoB4jB,EAAgB9lB,OAMpCuF,EAAO,IAAIjG,MAAM,8BAErB,GACF,CAIA,SAASwc,cAAcuK,EAAeC,GACpC,IAAMC,EAAYxnB,SAAS2Q,eAAe2W,GACpCG,EAAYznB,SAAS2Q,eAAe4W,GAC1CC,EAAUE,YAAYD,GAEtB,IAAME,EAAY3nB,SAASinB,cAAc,UACzCU,EAAUpQ,GAAKgQ,EACfC,EAAUL,YAAYQ,EAExB,CAKA,SAAS9W,gBAAgB9G,GAGvB,IADA,IAAIiI,EAAYhS,SAAS2Q,eAAe,gBAAgBvQ,qBAAqB,SAAS,GAChF4R,EAAUE,KAAK7R,OAAS,GAAG2R,EAAUG,UAAU,GAErD,IADA,IAAI7R,EAAE,EACG0I,EAAM,EAAGA,EAAMe,EAAQ1B,UAAUhI,OAAQ2I,IAClD,CACE,IAAIR,EAAMwJ,EAAUI,WAAW,GAEf5J,EAAI6J,YAAY,GACtBzB,UAAY,iDAAH7S,OAAoDuC,EAAC,+CAAAvC,OAA8C6pB,oBAAmB,aACzHpf,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKO,UAC1Bf,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKK,eAC/Bb,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKI,aAClCZ,EAAI6J,YAAY,GACtBzB,UAAY,uDAAH7S,OAA0DuC,EAAC,MACpDkI,EAAI6J,YAAY,GACtBzB,UAAY7G,EAAQ1B,UAAUW,GAAKM,aACnDhJ,GAAQ,CACV,CACF,CAEA,SAASsnB,oBAEP,IADA,IAAIpqB,EAAU,GACL8C,EAAI,EAAGA,GAAK,GAAIA,IACvB9C,GAAW,mBAAJO,OAAuBuC,EAAC,MAAAvC,OAAKuC,EAAC,aAEvC,OAAO9C,CACT,CAEA,SAAS+V,cAGP,IADA,IAAIsU,EAAQ7nB,SAAS2Q,eAAe,gBAAgBvQ,qBAAqB,SAAS,GACzEE,EAAI,EAAcunB,EAAM3V,KAAK5R,GAAIA,IAAK,CAC7C,IAAIhB,EAAIU,SAAS2Q,eAAe,mBAAD5S,OAAoBuC,IAC/CwnB,EAAQ9f,OAAO1I,EAAE2B,OAChBwH,EAAM,OAASof,EAAM3V,KAAK5R,GAAGynB,MAAM,GAAGC,UAC/B,GAARF,GACFzD,QAAQ5b,EAAKqf,EAEjB,CAEF,CAEA,SAAS3K,iBAEP,IADA,IAAI0K,EAAQ7nB,SAAS2Q,eAAe,gBAAgBvQ,qBAAqB,SAAS,GACzEE,EAAI,EAAcunB,EAAM3V,KAAK5R,GAAIA,IACxCN,SAAS2Q,eAAe,mBAAD5S,OAAoBuC,IAAKW,MAAQ,CAE5D,CAEA,SAASuX,sBAEP,IADA,IAAIxG,EAAYhS,SAAS2Q,eAAe,uBAAuBvQ,qBAAqB,SAAS,GACvF4R,EAAUE,KAAK7R,OAAS,GAAG2R,EAAUG,UAAU,EACvD,CAEA,SAAS0G,uBAAuBoP,EAAeC,GAG7C,IAFA,IAAIlW,EAAYhS,SAAS2Q,eAAe,uBAAuBvQ,qBAAqB,SAAS,GAEpF+nB,EAAe,EAAGA,EAAeF,EAAc5nB,OAAQ8nB,IAE9D,GAAyD,IAArDF,EAAcE,GAAczB,YAAYwB,GAAgB,CAC1D,IAAI1f,EAAMwJ,EAAUI,WAAW,GAEjB5J,EAAI6J,YAAY,GACtBzB,UAAYqX,EAAcE,GAAc1B,yBAC/Bje,EAAI6J,YAAY,GACtBzB,UAAYwX,mBAAmBH,EAAcE,GAActC,2BACnDrd,EAAI6J,YAAY,GACtBzB,UAAYqX,EAAcE,GAAc7C,WAC/B9c,EAAI6J,YAAY,GACtBzB,UAAYqX,EAAcE,GAAc3C,aAClChd,EAAI6J,YAAY,GACtBzB,UAAYqX,EAAcE,GAAczB,YAAYwB,GAASxV,iBACvDlK,EAAI6J,YAAY,GACtBzB,UAAYqX,EAAcE,GAAcxB,YAAYuB,GAASxV,iBAC1DlK,EAAI6J,YAAY,GACtBzB,UAAYyX,mBAAmBJ,EAAcE,GAAcvC,wBAAyBqC,EAAcE,GAAclC,kBAC/H,CAEJ,CAEA,SAASmC,mBAAmBE,GAQ1B,MANc,SACVtgB,OAAOsgB,GAAa,IACftgB,OAAOsgB,GAAa,EAAI,OAExBtgB,OAAOsgB,GAAa,EAAI,QAGnC,CAEA,SAASD,mBAAmBE,EAASC,GAWnC,OATIxgB,OAAOugB,GAAW,EACK,GAArBvgB,OAAOwgB,GACG,UAEA,cAGF,SAGhB,CAKA,SAASpF,OAAOqF,EAAMC,EAASC,EAAQC,EAASC,EAASC,GACvD,IACE,IAAIC,EAAgB,EACpB,GAAgB,GAAZD,EAEF,OAAqB,IADrBC,EAAgBC,WAAWP,EAAMC,EAASC,EAAQC,EAAS,IAElD,EAEApK,KAAKyK,IAAIL,EAASF,EAAUC,EAAS,EAAGnK,KAAKsE,IAAI6F,EAAQ,KAAOE,EAAUE,GAE9E,GAAgB,GAAZD,EAAe,CACxB,IAAK,IAAIxoB,EAAI,EAAGA,GAAKke,KAAKsE,IAAI,EAAG8F,EAAUD,EAASD,GAAUpoB,IAAK,CACjE,IAAI6d,EAAI,EACE,GAAL7d,IACH6d,EAAIK,KAAKyK,IAAIL,EAASF,EAAUC,EAAS,IAE3CI,GAAgCG,UAAUT,EAAME,EAASroB,EAAI,GAAI,EAAG,EAAG,GAAMke,KAAK2E,IAAI,EAAIsF,EAAM,EAAInoB,GAAM6d,CAC5G,CACA,OAAqB,GAAjB4K,EACK,EAEAF,EAAUE,EAAgBvK,KAAKyK,IAAIL,EAASF,EAAUC,EAAS,EAE1E,CACE,OAAO,CAEX,CAAE,MAAO/hB,GACPyH,QAAQzH,MAAMA,EAChB,CACF,CAEA,SAASoiB,WAAWP,EAAMC,EAASC,EAAQC,EAASO,GAClD,IACE,IAAMC,EAAO5K,KAAKyK,IAAIP,EAAUC,EAAQD,EAAUE,GAC5CS,EAAe7K,KAAKyK,IAAIL,EAASQ,EAAM5K,KAAKsE,IAAI6F,EAAQ,IACxDW,EAASJ,UAAUT,EAAMC,EAAUE,EAAU,GAAI,EAAG,EAAG,GAAKM,UAAUT,EAAMjK,KAAKsE,IAAI8F,EAAUQ,EAAM,IAAK,EAAG,EAAG,GAClHG,EAAW,EACf,GAAIF,EAAe,EACjB,IAAI,IAAI/oB,EAAI,EAAGA,GAAK+oB,EAAc/oB,IAChCipB,GAAsBL,UAAUT,EAAMC,EAAUE,EAAUQ,EAAO9oB,GAAI,EAAG,EAAG,GAG/E,OAAQgpB,EAASC,GAAYJ,CAC/B,CAAE,MAAOviB,GACPyH,QAAQzH,MAAMA,EAChB,CACF,CAEA,SAASsiB,UAAUT,EAAMe,EAAML,EAAKM,EAAQC,GAC1C,IACE,QAASP,GAAO,EAAIV,EAAOiB,KAASlL,KAAK2E,IAAI,EAAIsF,EAAMe,GAAQ,GAAKf,GAAQgB,IAAW,EAAIjL,KAAK2E,IAAI,EAAIsF,EAAMe,GAChH,CAAE,MAAO5iB,GACPyH,QAAQzH,MAAMA,EAChB,CACF,yFCpvDE+iB,EAA6B,IAAIC,IAAI,kDACrCC,EAA6B,IAAID,IAAI,kDACrCE,EAA6B,IAAIF,IAAI,kDACrCG,EAA6B,IAAIH,IAAI,iDACrCI,EAA6B,IAAIJ,IAAI,kDACrCK,EAA6B,IAAIL,IAAI,kDACrCM,EAA6B,IAAIN,IAAI,kDACrCO,EAA6B,IAAIP,IAAI,kDACrCQ,EAA6B,IAAIR,IAAI,kDACrCS,EAA6B,IAAIT,IAAI,kDACrCU,EAA8B,IAAIV,IAAI,iDACtCW,EAA8B,IAAIX,IAAI,kDACtCY,EAA8B,IAAIZ,IAAI,kDACtCa,EAA8B,IAAIb,IAAI,kDAEJ,IAAyCD,GACzC,IAAyCE,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACxC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC,GACzC,IAAyCC","sources":["webpack://excel-custom-functions-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/compat get default export","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","\n/****************************************************************************************\n * \n *                --------- AgencyDetails Class ----------------\n *    Builds a single employer with its multiple rate plans associated with it.\n *    Column indexes correspond to the import_rate_plan_info range. \n * \n ****************************************************************************************/\n\nclass AgencyDetails{\n\n  constructor(p_name, p_cid){\n    this.name = p_name;\n    this.cid = p_cid;\n    this.rateplans = [];\n    this.allplanlist = [];\n  }\n  \n  getRatePlans(data){\n    for (let row = 0; row < data.length; row++){\n      if (row > 0 && data[row][0] !=\"\"){\n        this.allplanlist.push({\n          VRP: data[row][0],\n          ERName: data[row][1],\n          RPName: data[row][2],\n          CountyName: data[row][3],\n          ActuaryName: data[row][4],\n          RiskPoolID: data[row][5],\n          CalPERSID: data[row][6],\n        });\n      }\n\n\n        if (this.cid == data[row][6]) \n        {\n          vrp = data[row][0];\n          vrpname = data[row][2];\n          actuaryname = data[row][4];\n          riskpool = data[row][5];\n\n          this.rateplans.push({\n            Rate_Plan_Id : vrp,\n            Rate_Plan_Name : vrpname,\n            Actuary_Name : actuaryname,\n            Risk_Pool : riskpool\n          });\n        }\n    }\n\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- AssumptionDetails Class ----------------\n *    Builds details about the assumption currently being used in the wb.\n *    parameters are coming from the control tab\n * \n ****************************************************************************************/\n\nclass AssumptionDetails{\n\n  constructor(p_vy, p_interest, p_salarygrowth){\n    this.year = p_vy;\n    this.valuationyear = \"06/30/\" + p_vy;\n    this.i = Number(p_interest);\n    this.s = Number(p_salarygrowth);\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- TableStructure Class ----------------\n *   \n * \n ****************************************************************************************/\n\nclass TableStructure {\n\n  constructor(oAgency, oAssumptions, pTableNameID, pDataSource, aFieldCodes, aFormatCodes, aVisibilityCodes, aERTotalRowCodes){\n    this.TableNameId = pTableNameID;\n    this.DataSource = pDataSource;\n    this.FieldCodes = aFieldCodes;\n    this.FormatCodes = aFormatCodes;\n    this.VisibilityCodes = aVisibilityCodes;\n    this.ERTotalRowCodes = aERTotalRowCodes;\n    this.FieldNames = [];\n    this.ERTotalRowValues = [];\n    this.SumTotalValues = [];\n    this.VRPValues = [];\n    this.getFieldNames(oAgency);\n    this.getVRPValues(oAgency, oAssumptions);\n    this.getSumTotalvalues();\n    this.getERTotalRowValues();\n  }\n\n  getFieldNames(oAgency){\n    const colMax = this.DataSource[0].length;\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_fieldname = fincode;\n      for ( let col = 0; col < colMax; col++){\n        if (fincode == this.DataSource[1][col]){  //assumes the fin code row is the second row in the range. ok for now, may need to param\n          tmp_fieldname = this.DataSource[0][col];\n          break;\n        }\n      }\n    this.FieldNames.push(tmp_fieldname);\n    });\n  }\n\n  getVRPValues(oAgency, oAssumptions){\n\n    const rowMax = this.DataSource.length;\n    const colMax = this.DataSource[0].length;\n\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_vrpvalues = [];\n      Object.keys(oAgency.rateplans).forEach(key => {\n        let vrp = oAgency.rateplans[key].Rate_Plan_Id;\n        for (let row = 0; row < rowMax; row++) {\n          if (vrp == this.DataSource[row][2]) {     //assumes the vrp list column is the 3rd column of the range. ok for now, may need to param\n            for ( let col = 0; col < colMax; col++){\n              if (fincode == this.DataSource[1][col]){   //assumes the fin code row is the second row in the range. ok for now, may need to param\n                tmp_vrpvalues.push({ Rate_Plan_Id : vrp, RP_FinCode : fincode, RP_Value : this.DataSource[row][col]});\n              }\n            }\n          }\n        }\n      });\n      if (!tmp_vrpvalues.length){ //handles if no fincode is matched\n        Object.keys(oAgency.rateplans).forEach(key => {\n        tmp_vrpvalues.push({ Rate_Plan_Id : 0, RP_FinCode : 0, RP_Value : 0});\n        });\n      };  \n      this.VRPValues.push(tmp_vrpvalues);\n    });\n\n  }\n\n  getSumTotalvalues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      let fsum = 0;\n      for( let v = 0; v < this.VRPValues[0].length; v++){\n        fsum = fsum + Number(this.VRPValues[f][v].RP_Value);\n      }\n      this.SumTotalValues.push(fsum);\n    }\n\n  }\n\n  getERTotalRowValues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      if (this.ERTotalRowCodes[f] == \"SUM\" ){\n        this.ERTotalRowValues.push(this.SumTotalValues[f]);\n      }\n      else if (this.ERTotalRowCodes[f] == \"N/A\" ){\n        this.ERTotalRowValues.push(\"N/A\");\n      }\n      else if (this.ERTotalRowCodes[f] == \"NULL\" ){\n        this.ERTotalRowValues.push(\"\");\n      }\n      else{\n        retval = eval(this.ERTotalRowCodes[f]);\n        this.ERTotalRowValues.push(retval);\n        this.SumTotalValues[f] = retval;    //the ERTotal and SUMTotal will be the same\n      }\n    }\n  }\n\n  RatioOfSums(val1, val2){ \n    if(this.SumTotalValues[this.FieldNames.indexOf(val2)] == 0 || this.SumTotalValues[this.FieldNames.indexOf(val2)] == \"\")\n    {return 0}\n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] / this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }\n\n  SumOfTotals(val1, val2){ \n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] + this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }  \n\n  SumOfProducts(val1, val2){\n\n    let sum = 0;\n    for(let v = 0; v < this.VRPValues[0].length; v++)\n    {\n      sum = sum + (this.VRPValues[this.FieldNames.indexOf(val1)][v].RP_Value * this.VRPValues[this.FieldNames.indexOf(val2)][v].RP_Value);\n    }\n    return sum;\n\n  }\n  \n}\n\n/****************************************************************************************\n * \n *                --------- Office OnReady! ----------------\n *    Main Point of entry. \n * \n ****************************************************************************************/\n\nOffice.onReady(() =>{\n  \n});\n\nOffice.initialize = () => {\n  document.getElementById(\"buttonFreshStart\").onclick = readFSPanel;\n  document.getElementById(\"reLoad\").onclick = function() {FetchExcelData(); getAmortSummary();}\n  document.getElementById(\"buttonResetFS\").onclick = getAmortSummary;\n  // Add the event handler.\n  Excel.run(async context => {\n    let sheet = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n  });\n};\n\n/**\n * Handle the changed event from the worksheet.\n *\n * @param event The event information from Excel\n */\nasync function onChange(event) {\n    await Excel.run(async (context) => {    \n        await context.sync();\n        VRPTrigger(event);\n  });\n}\n\n/****************************************************************************************\n * \n *                --------- VRPTrigger ----------------\n *    Catches the event in which the rpid named range in excel has changed.\n *    If triggred then initiates other functions to begin\n *    This is where other calls can be initiated\n * \n ****************************************************************************************/\n\nasync function VRPTrigger(event) {\n\n  try{\n    await Excel.run(async (context) => {\n\n    const sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n\n    const vrpId = sheetER.getRange(\"rpid\");\n\n    vrpId.load(\"address, values\");\n\n    await context.sync();    \n    \n    // get VRP location in workbook\n    const vrpRngLoc = vrpId.address.slice(vrpId.address.indexOf(\"!\") + 1);\n\n    if (event.address == vrpRngLoc )\n    {\n        console.log(`Event: Cell-Address: ${event.address}  Type: ${event.changeType}  Source: ${event.source}`)     \n        FetchExcelData();\n        getAmortSummary();\n    }\n    \n    })\n  }\n  catch(error){console.error(error);}\n}\n\n/****************************************************************************************\n * \n *                --------- FetchExcelData ----------------\n *    Will read data from excel and load it. After loading the data, the process of\n *    building the content begins.\n *    ?? reconsider loading data only on workbook open? rather refreshing every VRPtrigger?\n * \n ****************************************************************************************/\n\nasync function FetchExcelData(){\n  \n  await Excel.run(async (context) => {\n\n    const sheetRPfinancingAll = context.workbook.worksheets.getItem(\"export_rp_financing_all\");\n    const sheetPostRPfinancing = context.workbook.worksheets.getItem(\"export_post_rp_financing\");\n    const sheetCalcsCurRP = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    const sheetRPinfo = context.workbook.worksheets.getItem(\"import_rate_plan_info\");\n    const sheetControl = context.workbook.worksheets.getItem(\"control\");\n    const sheetPEPRAEe = context.workbook.worksheets.getItem(\"PEPRA_EE_Rates\");\n\n    const exl_RPfinancingAll = sheetRPfinancingAll.getRange(\"A3:NM3000\");\n    const exl_PostRPfinancing = sheetPostRPfinancing.getRange(\"A3:N3000\");\n    const exl_RPinfo = sheetRPinfo.getRange(\"B2:I3000\");\n    const exl_PEPRAEe = sheetPEPRAEe.getRange(\"B3:M50\"); \n\n    const exl_EmployerName = sheetCalcsCurRP.getRange(\"org\");\n    const exl_CalpersId = sheetCalcsCurRP.getRange(\"calpers_id\");\n\n    const exl_ValuationYear = sheetControl.getRange(\"current_year\");\n    const exl_InterestRate = sheetControl.getRange(\"interest_rate\");\n    const exl_PayrollGrowth = sheetControl.getRange(\"payroll_growth\");\n\n    //Financial Data\n    exl_RPfinancingAll.load(\"address, columnCount, rowCount, values\");\n    exl_PostRPfinancing.load(\"address, columnCount, rowCount, values\");\n    exl_RPinfo.load(\"address, columnCount, rowCount, values\");\n    exl_PEPRAEe.load(\"address, columnCount, rowCount, values\");\n\n    //Employer Details\n    exl_EmployerName.load(\"values\");\n    exl_CalpersId.load(\"values\");\n\n    //assumptions\n    exl_ValuationYear.load(\"values\");\n    exl_InterestRate.load(\"values\");\n    exl_PayrollGrowth.load(\"values\");\n\n  await context.sync();  \n\n    //build AgencyDetail class\n    const RPinfo = exl_RPinfo.values;\n    const Agency = new AgencyDetails(exl_EmployerName.values, exl_CalpersId.values);\n    Agency.getRatePlans(RPinfo);\n    \n   //override instance\n\n    //build AssumptionDetails class\n    const Assumptions = new AssumptionDetails(exl_ValuationYear.values, exl_InterestRate.values, exl_PayrollGrowth.values)\n    \n    // All financial data placed in array\n    const Data = [exl_RPfinancingAll.values, exl_PostRPfinancing.values, exl_PEPRAEe.values];\n\n      console.log(`The employer currently loaded is: ${Agency.name} - CID: ${Agency.cid} `) ;\n      console.log(\"The associated rate plans are:\"); console.log(Agency.rateplans);\n      console.log(`The current Assumptions for Valuation Year: ${Assumptions.valuationyear} - Interest Rate: ${Assumptions.i} - Salary Growth Rate: ${Assumptions.s}`) ;\n\n      LoadInfoToDoc(Agency, Assumptions, RPinfo);\n\n      SummaryTableControl(Agency, Assumptions, Data)\n  });\n\n}\n\n/****************************************************************************************\n * \n *                --------- LoadInfoToDoc ----------------\n *    Transfers over agency and assumptions to the html page  \n * \n ****************************************************************************************/\n\nfunction LoadInfoToDoc(oAgency, oAssum){\n    \n  document.getElementById(\"idERname\").innerHTML = oAgency.name;\n  document.getElementById(\"idERcid\").innerHTML = oAgency.cid;\n  document.getElementById(\"idVY\").innerHTML = oAssum.valuationyear;\n\n  populateFSPanel(oAgency);\n}\n\n/****************************************************************************************\n * \n *                --------- SummaryTableControl ----------------\n *    This initiates the build for all tables along with its desired behavior and \n *    description of what the table is.  The common structure is that the first columns \n *    are the plan name and vrp id fields from the agency object. The common table has VRPs for \n *    its rows and the financial data as its fields(columns).\n * \n ****************************************************************************************/\n\nfunction SummaryTableControl(oAgency, oAssumptions, aData){\n\n  //Break the array of Data.   DataSets\n  const DS0 = aData[0];     //export_rp_financing_all\n  const DS1 = aData[1];     //export_post_rp_financing\n  const DS2 = aData[2];     //PEPRA_EE_Rates\n\n  /* Format Codes\n  #1 - Number with commas\n  #2 - Percent rounded to 2 decimal\n  #3 - number rounded to 2 decimal\n  #4 - No formating\n  */\n\n   /* Visbility Codes\n  #0 - Dont display VRP rows.  Total bottom row will still display\n  #1 - Display\n  */\n\n   /* ER Total Codes\n  N/A - Not Applicable\n  SUM - Straight sum of field\n  NULL - empty\n  RatioOfSums(v1,v2) - stringliteral evaluation. Ratio of field sums v1, v2\n  SumOfProducts(v1,v2) - stringliteral evaluation. sum of product of vrp level value v1, v2\n  SumOfTotals(v1,v2) - stringliteral evaluation. sum of field sums v1, v2\n  */\n\n  // **** -- Sensitivity Analysis Tables -- *****\n\n    // --- Maturity Measures ---\n    const TableNameID_MM = \"idTblmaturityMeasures\";\n    const DataSource_MM = DS0;\n    const FieldCodes_MM = [786,787,63,66,788,14,16];\n    const FormatCodes_MM = [3,3,1,1,1,1,1];\n    const VisibilityCodes_MM = [1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MM = [\"this.RatioOfSums('AL Status 5', 'AL Total')\",\"this.RatioOfSums('# Stat 1', 'Unique Retiree Count')\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\"];\n\n    const oTable_MM = new TableStructure(oAgency, oAssumptions, TableNameID_MM, DataSource_MM, FieldCodes_MM, FormatCodes_MM, VisibilityCodes_MM, ERTotalRowCodes_MM)\n\n    // --- Hypothetical Termination ---\n    const TableNameID_HT = \"idTblHypotheticalTerm\";\n    const DataSource_HT = DS0;\n    const FieldCodes_HT = [689,690,691,692,693,694];;\n    const FormatCodes_HT = [1,1,2,1,1,2];\n    const VisibilityCodes_HT = [1,1,1,1,1,1];\n    const ERTotalRowCodes_HT = [\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - Low UAL', 'Term - Low AL Total')\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - High UAL', 'Term - High AL Total')\"];\n\n    const oTable_HT = new TableStructure(oAgency, oAssumptions, TableNameID_HT, DataSource_HT, FieldCodes_HT, FormatCodes_HT, VisibilityCodes_HT, ERTotalRowCodes_HT);   \n\n    // --- Discount Rate Sensitivity ---\n    const TableNameID_DR = \"idTblDiscountSensitivity\";\n    const DataSource_DR = DS0;\n    const FieldCodes_DR = [626,627,766,767,760,761,615,616,628,629,768,769];\n    const FormatCodes_DR = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_DR = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_DR = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_DR = new TableStructure(oAgency, oAssumptions, TableNameID_DR, DataSource_DR, FieldCodes_DR, FormatCodes_DR, VisibilityCodes_DR, ERTotalRowCodes_DR);  \n\n    // --- Inflation Last Annual Sensitivity ---\n    const TableNameID_IL = \"idTblInflationSensitivity\";\n    const DataSource_IL = DS0;\n    const FieldCodes_IL = [770,771,772,773,760,761,615,616,774,775,776,777];\n    const FormatCodes_IL = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_IL = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_IL= [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_IL = new TableStructure(oAgency, oAssumptions, TableNameID_IL, DataSource_IL, FieldCodes_IL, FormatCodes_IL, VisibilityCodes_IL, ERTotalRowCodes_IL);  \n\n    // --- Mortality Sensitivity ---\n    const TableNameID_MS = \"idTblMortalitySensitivity\";\n    const DataSource_MS  = DS0;\n    const FieldCodes_MS  = [778,779,780,781,760,761,615,616,782,783,784,785];\n    const FormatCodes_MS  = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_MS  = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MS = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-10% UAL Total', '-10% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+10% UAL Total', '+10% AL')\"];\n\n    const oTable_MS  = new TableStructure(oAgency, oAssumptions, TableNameID_MS, DataSource_MS, FieldCodes_MS, FormatCodes_MS, VisibilityCodes_MS, ERTotalRowCodes_MS);    \n    \n    // --- Assets ---\n    const TableNameID_MVA = \"idTblMVA\";\n    const DataSource_MVA  = DS0;\n    const FieldCodes_MVA  = [563];\n    const FormatCodes_MVA  = [1];\n    const VisibilityCodes_MVA  = [1];\n    const ERTotalRowCodes_MVA = [\"SUM\"];\n\n    const oTable_MVA  = new TableStructure(oAgency, oAssumptions, TableNameID_MVA, DataSource_MVA, FieldCodes_MVA, FormatCodes_MVA, VisibilityCodes_MVA, ERTotalRowCodes_MVA);    \n\n    // --- LDROM ---\n    const TableNameID_LDROM = \"idTblLDROM\";\n    const DataSource_LDROM  = DS0;\n    const FieldCodes_LDROM  = [2950,2951,2952,2953,2954,2955,2510];\n    const FormatCodes_LDROM  = [1,1,1,1,1,1,1];\n    const VisibilityCodes_LDROM  = [1,1,1,1,1,1,1];\n    const ERTotalRowCodes_LDROM = [\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\"]\n    const oTable_LDROM  = new TableStructure(oAgency, oAssumptions, TableNameID_LDROM, DataSource_LDROM, FieldCodes_LDROM, FormatCodes_LDROM, VisibilityCodes_LDROM, ERTotalRowCodes_LDROM);    \n    \n\n  // **** -- Projected Contributions Tables -- ***** \n  \n    // --- Projections 0 ---\n    const TableNameID_P0 = \"idTblprojections0\";\n    const DataSource_P0  = DS0;\n    const FieldCodes_P0 = [2801,718, 717,636,707,'X'];\n    const FormatCodes_P0  = [1,1,1,2,2,2];\n    const VisibilityCodes_P0  = [1,1,1,1,1,0];\n    const ERTotalRowCodes_P0 = [\"SUM\",\"SUM\",\"SUM\",\"this.RatioOfSums('UAL Payment $','Payroll Projection Yr 3')\",`this.RatioOfSums(\"Plan's Net ER NC $\",\"Payroll Projection Yr 3\")`, `this.SumOfTotals(\"Plan's Net ER NC %\",\"UAL% 50-1\")`];\n\n    const oTable_P0  = new TableStructure(oAgency, oAssumptions, TableNameID_P0, DataSource_P0, FieldCodes_P0, FormatCodes_P0, VisibilityCodes_P0, ERTotalRowCodes_P0);    \n    \n    // --- Projections 1 ---\n    const TableNameID_P1 = \"idTblprojections1\";\n    const DataSource_P1  = DS0;\n    const FieldCodes_P1 = [2802,631, 'X', 637, 630, 'Y']; \n    const FormatCodes_P1  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P1  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P1 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 4','Proj ERNC%')\",\"this.RatioOfSums('UAL$ 50-1','Payroll Projection Yr 4')\", \"this.RatioOfSums('X','Payroll Projection Yr 4')\", `this.SumOfTotals(\"UAL% 50-2\",\"Proj ERNC%\")`];\n\n    const oTable_P1  = new TableStructure(oAgency, oAssumptions, TableNameID_P1, DataSource_P1, FieldCodes_P1, FormatCodes_P1, VisibilityCodes_P1, ERTotalRowCodes_P1);    \n    \n    // --- Projections 2 ---\n    const TableNameID_P2 = \"idTblprojections2\";\n    const DataSource_P2  = DS0;\n    const FieldCodes_P2 = [2803,632, 'X', 638, 731, 'Y']; \n    const FormatCodes_P2  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P2  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P2 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 5','NC% 50-2')\",\"this.RatioOfSums('UAL$ 50-2','Payroll Projection Yr 5')\", \"this.RatioOfSums('X','Payroll Projection Yr 5')\", `this.SumOfTotals(\"UAL% 50-3\",\"NC% 50-2\")`];\n\n    const oTable_P2  = new TableStructure(oAgency, oAssumptions, TableNameID_P2, DataSource_P2, FieldCodes_P2, FormatCodes_P2, VisibilityCodes_P2, ERTotalRowCodes_P2);    \n\n    // --- Projections 3 ---\n    const TableNameID_P3 = \"idTblprojections3\";\n    const DataSource_P3  = DS0;\n    const FieldCodes_P3 = [2804,633, 'X', 639, 732, 'Y']; \n    const FormatCodes_P3  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P3  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P3 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 6','NC% 50-3')\",\"this.RatioOfSums('UAL$ 50-3','Payroll Projection Yr 6')\", \"this.RatioOfSums('X','Payroll Projection Yr 6')\", `this.SumOfTotals(\"UAL% 50-4\",\"NC% 50-3\")`];\n\n    const oTable_P3  = new TableStructure(oAgency, oAssumptions, TableNameID_P3, DataSource_P3, FieldCodes_P3, FormatCodes_P3, VisibilityCodes_P3, ERTotalRowCodes_P3);    \n\n    // --- Projections 4 ---\n    const TableNameID_P4 = \"idTblprojections4\";\n    const DataSource_P4  = DS0;\n    const FieldCodes_P4 = [2805,634, 'X', 640, 733, 'Y']; \n    const FormatCodes_P4  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P4  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P4 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 7','NC% 50-4')\",\"this.RatioOfSums('UAL$ 50-4','Payroll Projection Yr 7')\", \"this.RatioOfSums('X','Payroll Projection Yr 7')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-4\")`];\n\n    const oTable_P4  = new TableStructure(oAgency, oAssumptions, TableNameID_P4, DataSource_P4, FieldCodes_P4, FormatCodes_P4, VisibilityCodes_P4, ERTotalRowCodes_P4);    \n\n\n    // --- Projections 5 ---\n    const TableNameID_P5 = \"idTblprojections5\";\n    const DataSource_P5  = DS0;\n    const FieldCodes_P5 = [2806,635, 'X',640, 734, 'Z']; \n    const FormatCodes_P5  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P5  = [1,1,0,0,1,0];\n    const ERTotalRowCodes_P5 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 8','NC% 50-5')\",\"this.RatioOfSums('UAL$ 50-5','Payroll Projection Yr 8')\", \"this.RatioOfSums('X','Payroll Projection Yr 8')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-5\")`];\n\n    const oTable_P5  = new TableStructure(oAgency, oAssumptions, TableNameID_P5, DataSource_P5, FieldCodes_P5, FormatCodes_P5, VisibilityCodes_P5, ERTotalRowCodes_P5);    \n    \n\n    // --- Projections 6 ---\n    const TableNameID_P6 = \"idTblprojections6\";\n    const DataSource_P6  = DS0;\n    const FieldCodes_P6 = [2807,752, 'X',640 , 734, 'Z']; \n    const FormatCodes_P6  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P6  = [1,1,0,0,1,0];\n    const ERTotalRowCodes_P6 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 9','NC% 50-5')\",\"this.RatioOfSums('UAL$ 50-6','Payroll Projection Yr 9')\", \"this.RatioOfSums('X','Payroll Projection Yr 9')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-5\")`];\n\n    const oTable_P6  = new TableStructure(oAgency, oAssumptions, TableNameID_P6, DataSource_P6, FieldCodes_P6, FormatCodes_P6, VisibilityCodes_P6, ERTotalRowCodes_P6);    \n\n\n  DataTableToHTML(oTable_MM, oAgency);\n  DataTableToHTML(oTable_HT, oAgency);\n  DataTableToHTML(oTable_DR, oAgency);\n  DataTableToHTML(oTable_IL, oAgency);\n  DataTableToHTML(oTable_MS, oAgency);\n  DataTableToHTML(oTable_MVA, oAgency);\n  DataTableToHTML(oTable_LDROM, oAgency);\n  DataTableToHTML(oTable_P0, oAgency);\n  DataTableToHTML(oTable_P1, oAgency);\n  DataTableToHTML(oTable_P2, oAgency);\n  DataTableToHTML(oTable_P3, oAgency);\n  DataTableToHTML(oTable_P4, oAgency);\n  DataTableToHTML(oTable_P5, oAgency);\n  DataTableToHTML(oTable_P6, oAgency);\n}\n\n/****************************************************************************************\n * \n *                --------- DataTableToHTML ----------------\n *    Transfers the table structure into a table in the HTML document.\n *    Formats and appends the the rateplanname and VRPid to the first 2 cols.\n * \n ****************************************************************************************/\n\nfunction DataTableToHTML(oTable, oAgency){\n\n  let tableBody = document.getElementById(oTable.TableNameId).getElementsByTagName('tbody')[0];\n  let tableFoot= document.getElementById(oTable.TableNameId).getElementsByTagName('tfoot')[0];\n  while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n  while(tableFoot.rows.length > 0) tableFoot.deleteRow(0);\n\n  for (let vrp = 0; vrp < oAgency.rateplans.length; vrp++)\n  {\n    var row = tableBody.insertRow(-1);\n\n    var cellPlanName = row.insertCell(-1);\n    cellPlanName.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Name;\n    var cellPlanID = row.insertCell(-1);\n    cellPlanID.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Id;\n\n    for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n    {\n      var cellVal = row.insertCell(-1);\n\n      let formatCode = Number(oTable.FormatCodes[fcode]);\n      let visibleCode = Number(oTable.VisibilityCodes[fcode]);\n\n      let FormatVisible = formatCode * visibleCode;\n\n      var result = oTable.VRPValues[fcode][vrp].RP_Value;\n      cellVal.innerHTML = result;\n\n      switch (FormatVisible){\n        case 0:\n          cellVal.innerHTML = \"\";\n          break;\n        case 1:\n          cellVal.innerHTML = result.toLocaleString(\"en-US\");\n          break;\n        case 2:\n          cellVal.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n          break;\n        case 3:\n          if ( result != \"\" ){\n            cellVal.innerHTML = Number(result).toFixed(2);\n          }\n          else{\n            cellVal.innerHTML = \"N/A\";\n          }\n          break;\n        case 4:\n          cellVal.innerHTML = result; \n          break;\n      }\n\n    }\n  }\n\n  var rowF = tableFoot.insertRow(-1);\n  let cellER = rowF.insertCell(-1);\n  cellER.colSpan = \"2\";\n  cellER.innerHTML = \"Employer Total:\"\n\n  for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n  {\n\n    let formatCode = Number(oTable.FormatCodes[fcode]);\n    let result = oTable.ERTotalRowValues[fcode]\n    let cellf = rowF.insertCell(-1);\n\n    switch (formatCode){\n      case 0:\n        cellf.innerHTML = result;\n        break;\n      case 1:\n        if ( result != \"\" ){\n          result = Number(result).toFixed(0);\n          cellf.innerHTML = Number(result).toLocaleString(\"en-US\");\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 2:\n        if ( result != \"\" ){\n        cellf.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }      \n        break;\n      case 3:\n        if ( result != \"\" ){\n          cellf.innerHTML = Number(result).toFixed(2);\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 4:\n        cellf.innerHTML = result; \n        break; \n    }\n  }\n\n}\n\n\n/****************************************************************************************\n * \n *                --------- Amort Code ----------------\n * \n ****************************************************************************************/\n\n\n// BarChartData class definition\n//const globalDataUAL = {\n  class ChartDataUAL {\n    constructor() {\n      this.data = [];\n    }\n    // Method to append new datasets\n    addData(plan, empAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: empAmortSch[\"amortTotals\"][plan][\"Total Payments\"].slice(0,25),\n        order: 2,\n        type: \"bar\",\n        stack: \"UALPayment\",\n        yAxisID: \"y-axis-1\",\n        backgroundColor: planColor,\n        borderColor: planBorderColor,\n        amortBases: empAmortSch[\"amortBases\"][plan] // Reference to original array of bases\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n    addBalanceData(plan, planAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: planAmortSch[\"Total Balance\"].slice(0,25),\n        order: 2,\n        type: \"bar\",\n        stack: \"UALBalance\",\n        yAxisID: \"y-axis-1\",\n        backgroundColor: planColor,\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n    addPayrollData(projPaySch, planBorderColor) {\n      var objData = {\n        label: \"Projected Payroll\",\n        data: projPaySch.slice(0,25),\n        order: 1,\n        type: \"line\",\n        borderDash: [20, 5],\n        stack: \"Payroll\",\n        yAxisID: \"y-axis-1\",\n        hidden: true,\n        backgroundColor: \"transparent\",\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('Payroll data has been appended')\n    }\n    addPctPayData(planBorderColor) {\n      var objData = {\n        label: \"UAL% of Payroll\",\n        data: createProjArray(25),\n        order: 0,\n        type: \"line\",\n        borderDash: [20, 5],\n        stack: \"UALPct\",\n        yAxisID: \"y-axis-2\",\n        //hidden: true,\n        backgroundColor: \"transparent\",\n        borderColor: planBorderColor\n      };\n\n      // Clear the old UAL % of payroll calc before adding the new\n      let newArray = this.data.filter(item => item.label !== \"UAL% of Payroll\");\n      this.data = newArray;\n      \n      let totPmt = createProjArray(30);\n      for (let i = 0; i < this[\"data\"].length; i++) {\n        if (this[\"data\"][i][\"stack\"] == \"UALPayment\") {\n          for (let j = 0; j < this[\"data\"][i][\"data\"].length; j++) {\n            totPmt[j] += Number(this[\"data\"][i][\"data\"][j]);\n          }\n        }\n      }\n      for (let k = 0; k < this[\"data\"].length; k++) {\n        if (this[\"data\"][k][\"stack\"] == \"Payroll\") {\n          for (let m = 0; m < 25; m++) {\n            if (Number(this[\"data\"][k][\"data\"][m]) > 0) {\n              objData[\"data\"][m] = Number(totPmt[m])/Number(this[\"data\"][k][\"data\"][m]);\n            }\n          }\n        }\n      }\n\n      this.data.push(objData);\n      console.log('UAL% data has been appended')\n    }\n  };\n  \n  // Global variables for two instances of UAL bar chart data\n  let barChartUAL = new ChartDataUAL;\n  let barChartUALBalance = new ChartDataUAL;\n  let barChartHypUAL = new ChartDataUAL;\n  var chart1Canvas = document.getElementById(\"chartUAL\");\n  var chart2Canvas = document.getElementById(\"chartHypUAL\");\n  var chart1 = chart1Canvas.getContext('2d');\n  var chart2 = chart2Canvas.getContext('2d');\n  var globalDRate = 0;\n  Chart.defaults.global.elements.rectangle.borderWidth = 2;\n  \n  \n  const globalChartBarColors = [\n    'rgba(201, 203, 207, 0.7)',\n    'rgba(255, 159, 64, 0.7)',\n    'rgba(153, 102, 255, 0.7)',\n    'rgba(255, 205, 86, 0.7)',\n    'rgba(75, 192, 192, 0.7)',\n    'rgba(54, 162, 235, 0.7)',\n    'rgba(255, 99, 132, 0.7)'  \n  ];\n  \n  const globalChartBorderColors = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(201, 203, 207)',\n    'rgb(255, 159, 64)',\n    'rgb(153, 102, 255)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(255, 99, 132)' \n  ];\n  \n // Add value labels on each element within a stack\n Chart.plugins.register({\n  afterDatasetsDraw: function (chart, easing) {\n    var ctx = chart.ctx;\n    var grandUALTotal = 0;\n\n    chart.data.labels.forEach(function (label, labelIndex) {\n      var total = [0, 0, 0];\n      var highestIndex = [0, 0, 0];\n      var visiblePayroll = false;\n      chart.data.datasets.forEach(function (dataset, datasetIndex) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        if (!meta.hidden && dataset.type == \"bar\" && dataset.stack ==\"UALPayment\") {\n          total[0] += dataset.data[labelIndex];\n          highestIndex[0] = datasetIndex;\n        // } else if (meta.$filler.visible && dataset.type == \"line\" && dataset.stack ==\"Payroll\") { // meta.$filler.visible creating NULL read error when hiding data from the legend?\n        //   total[2] += dataset.data[labelIndex];\n        //   highestIndex[2] = datasetIndex;\n        //   visiblePayroll = true;\n        };\n      });\n      grandUALTotal += total[0];\n\n      // Display total at the top of each category\n      var xPos = chart.getDatasetMeta(highestIndex[0]).data[labelIndex]._model.x;\n      var yPos = chart.getDatasetMeta(highestIndex[0]).data[labelIndex]._model.y - 5; // Adjust label position as needed\n      ctx.save(); // .save and .restore functions are used to save and restore the drawing state before and after rotation\n      ctx.translate(xPos, yPos);  // Move the drawing origin to the desired position\n      ctx.rotate(-Math.PI / 2); // 90 degree rotate\n      ctx.fillStyle = 'black'; // Label text color\n      ctx.font = '12px Arial'; // Label font size and family\n      ctx.textAlign = 'center';\n      ctx.fillText(total[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"), 0, 0);\n      ctx.restore();\n      // Display UAL % of Pay at the top of index\n      // if (visiblePayroll) {\n      //   xPos = chart.getDatasetMeta(highestIndex[2]).data[labelIndex]._model.x;\n      //   yPos = chart.getDatasetMeta(highestIndex[2]).data[labelIndex]._model.y - 25; // Adjust label position as needed\n      //   ctx.save(); // .save and .restore functions are used to save and restore the drawing state before and after rotation\n      //   ctx.translate(xPos, yPos);  // Move the drawing origin to the desired position\n      //   ctx.rotate(-Math.PI / 2); // 90 degree rotate\n      //   ctx.fillStyle = 'red'; // Label text color\n      //   ctx.font = '12px Arial'; // Label font size and family\n      //   ctx.textAlign = 'center';\n      //   let pctUAL = 0;\n      //   if (Number(total[2]) > 0) {pctUAL = (Number(total[0])/Number(total[2]))*100};\n      //   ctx.fillText(pctUAL.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) + '%', 0, 0);\n      //   ctx.restore();\n      // };\n    });\n    // Grand Total:\n    ctx.save();\n    ctx.fillStyle = 'black'; // Label text color\n    ctx.font = '12px Arial'; // Label font size and family\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'top';\n    ctx.fillText(`Total UAL Payments: ${grandUALTotal.toLocaleString()}`, chart.width - 10, 50);\n    ctx.restore();\n  }\n});\n  \n  //Added 2/8/24\n  function renderUALChart(chartName, cDataSet, xLabelStart) {\n    const ctx = document.getElementById(chartName).getContext('2d');  //move this to async function?\n    var xValues = [];\n    for (let i = 0; i < cDataSet[0][\"data\"].length; i++) {\n      xValues.push(Number(xLabelStart) + i); //parameterize starting year so not hard-coded\n    };\n    Chart.Legend.prototype.afterFit = function() {\n      this.height = this.height + 35;\n    };  \n    const chartUAL = new Chart(chartName,{\n      type: 'bar',\n      data: {\n          labels: xValues,\n          datasets: cDataSet\n      },\n      options: {\n        legend: {\n              \n        },\n        scales: {\n          xAxes: [{ stacked: true }],\n          yAxes: [{ id: 'y-axis-1',\n            position: 'left',\n            stacked: true, \n            ticks: { \n              callback: function (value, index, values) {\n                //return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                return '$' + value.toLocaleString();\n              }\n            } \n          },\n          { id: 'y-axis-2',\n            position: 'right',\n            //stacked: true, \n            ticks: { \n              callback: function (value, index, values) {\n                //return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                return (value.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3})*100) + '%';\n              },\n              fontColor: 'red'\n            },\n            gridLines: {drawOnChartArea: false,\n              color: 'red',\n              lineWidth: 2\n            }\n          }]\n        },\n        tooltips: {\n          callbacks: {\n            label: function (tooltipItem, data) {\n              if (data[\"datasets\"][tooltipItem[\"datasetIndex\"]][\"stack\"] == \"UALPct\") {\n                return (tooltipItem.yLabel.toLocaleString(undefined, { minimumFractionDigits: 4, maximumFractionDigits: 4})*100) + '%';\n              } else {\n                return '$' + tooltipItem.yLabel.toLocaleString();\n              }\n            }\n          }\n        },\n        onClick: function(evt, elements) {\n          if (elements && elements.length > 0) {\n            clearAmortBasePanel();\n            elements.forEach(function(element) {\n              var datasetIndex = element._datasetIndex;\n              var index = element._index;\n              var value = chartUAL.data.datasets[datasetIndex].data[index]; //Needs revisions??\n              console.log('Clicked on bar index ' + index + ' with value ' + value);\n              if (chartUAL.data.datasets[datasetIndex].stack == 'UALPayment') {\n                populateAmortBasePanel(chartUAL.data.datasets[datasetIndex].amortBases, index);\n              }\n            });\n            \n          }\n        }\n      }\n  \n    });\n  \n    // Expose  chart globally if to update later\n    if (chartName == \"chartUAL\") {\n      window.chartUAL = chartUAL;\n    } else if (chartName == \"chartHypUAL\") {\n      window.chartHypUAL = chartUAL;\n    }\n\n  }\n  \n  // Added 1/19/24\n  async function getPoolSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create a dictionary to store totals for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const col of matchingColumns) {\n          // Initialize total for the column if not already present\n          const rsltType = Number(employerRsltsKey.values[0][col]);\n          columnTotals[rsltType] = columnTotals[rsltType] || 0;\n  \n          for (const row of matchingRows) {\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`${rsltType}: ${columnTotals[rsltType]}`);\n        });\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/25/24\n  async function getPlanSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        const employerRows = {};\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n            employerRows[employerRslts.values[row][2]] = employerRows[employerRslts.values[row][2]] || 0;\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create dictionaries to store totals and values for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const row of matchingRows) {\n          const employerVRP = Number(employerRslts.values[row][2]);\n          const rowValues = {};  // Nest within employerRows{}\n  \n          for (const col of matchingColumns) {\n            // Initialize total for the column if not already present\n            const rsltType = Number(employerRsltsKey.values[0][col]);\n            columnTotals[rsltType] = columnTotals[rsltType] || 0;\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n                rowValues[rsltType] = numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n          employerRows[employerVRP] = rowValues;\n  \n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`Fin Result ${rsltType} Total: ${columnTotals[rsltType]}`);\n        });\n        Object.keys(employerRows).forEach((key) => {\n          Object.keys(employerRows[key]).forEach((inner) => {\n            console.log(`VRP ${key}: Fin Result ${inner}: ${employerRows[key][inner]}`);\n          });\n        });\n        console.log(employerRows);\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/26/24\n  async function getAmortSummary() {\n    try {\n      await Excel.run(async (context) => {\n        var amortSch = new EmpUAL;\n        await amortSch.getProps();\n        await amortSch.addAmortData();\n        console.log(\"The updated ER amort schedules are:\");\n        console.log(amortSch);\n        // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n        barChartUAL.data.splice(0); // Clear the data set first\n        let i = 0;\n        Object.keys(amortSch[\"amortTotals\"]).forEach((key) => {\n          barChartUAL.addData(key, amortSch, globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n\n        // Testing projected payroll line\n        barChartUAL.addPayrollData(amortSch.payrollData.empTotal, \"black\");\n        barChartUAL.addPctPayData(\"red\");\n\n        barChartUALBalance.data.splice(0); // Clear the data set first\n        // Store balance data for use in fresh starts\n        i = 0;\n        Object.keys(amortSch[\"amortTotals\"]).forEach((key) => {\n          barChartUALBalance.addBalanceData(key, amortSch[\"amortTotals\"][key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        replaceCanvas(\"chartContainer1\",\"chartUAL\");\n        chart1.clearRect(0, 0, chart1Canvas.width, chart1Canvas.height);\n        renderUALChart(\"chartUAL\", barChartUAL.data, amortSch.rateYear);\n        barChartHypUAL.data.splice(0); // Clear the data set first\n        i = 0;\n        Object.keys(amortSch[\"amortTotals\"]).forEach((key) => {\n          barChartHypUAL.addData(key, amortSch, globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        barChartHypUAL.addPayrollData(amortSch.payrollData.empTotal, \"black\");\n        barChartHypUAL.addPctPayData(\"red\");\n        replaceCanvas(\"chartContainer2\",\"chartHypUAL\");\n        chart2.clearRect(0, 0, chart2Canvas.width, chart2Canvas.height);    \n        renderUALChart(\"chartHypUAL\", barChartHypUAL.data, amortSch.rateYear);\n        \n        resetFSperiods();\n        // renderUALChart(\"chartHypUAL\", chart2.data);\n        // //chart2.update();\n        // //chart2.ctx.restore();\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // Added 3/25/24\n  // BarChartData class definition\n//const globalDataUAL = {\n  class EmpUAL {\n    constructor() {\n      this.employerCID = 0;\n      this.rateYear = 0;\n      this.discountRate = 0;\n      this.payrollInflRate = 0;\n      this.plans = [];\n      this.amortBases = {};\n      this.amortTotals = {};\n      this.payrollData = {};\n      this.pctUALData = [];\n    }\n\n    // Method to set params: employerCID, discountRate, payrollInflRate\n    async getProps() {\n      return new Promise(async (resolve, reject) => {\n        try {\n          await Excel.run(async (context) => {\n            // Get the selected range\n            let sheetCtrl = context.workbook.worksheets.getItem(\"control\")\n            let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n            let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n            let sheetERProj = context.workbook.worksheets.getItem(\"ER Projection\")\n            const cID = sheetER.getRange(\"calpers_id\"); \n            const curYear = sheetCtrl.getRange(\"current_year\");\n            const dRate = sheetCtrl.getRange(\"interest_rate\");\n            const pInflRate = sheetCtrl.getRange(\"payroll_growth\");\n            const empPayroll = sheetERProj.getRange(\"C13\"); // For rate-setting year\n\n            // Load the values of the selected range\n            cID.load(\"values\");\n            curYear.load(\"values\");\n            dRate.load(\"values\");\n            pInflRate.load(\"values\");   \n            empPayroll.load(\"values\");  \n            // Run the queued commands to load values\n            await context.sync();\n\n            this.employerCID = Number(cID.values);\n            this.rateYear = Number(curYear.values)+2;\n            this.discountRate = Number(dRate.values);\n            this.payrollInflRate = Number(pInflRate.values);\n            \n            this.payrollData.empTotal = createProjArray(30);\n            this.payrollData.empTotal[0] = Number(empPayroll.values);\n            this.payrollData.empTotal = createRolledArray(this.payrollData.empTotal, (1 + Number(this.payrollInflRate)));\n            \n          });\n          resolve();\n        } catch (error) {\n            reject(error);\n        }\n      });\n    }  \n\n    // Method to get rolled up amort schedules by plan\n    async addAmortData() {\n      return new Promise(async (resolve, reject) => {\n        try {\n          await Excel.run(async (context) => {\n            // Get the selected range\n            let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n            let sheetAmortRslt = context.workbook.worksheets.getItem(\"export_rp_amort_base_all\")\n            const keyColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n            const keyAmortColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n            const finRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n            const finAmortRows = sheetAmortRslt.getRange(\"C3:W30000\");\n            const finAmortRowsKey = sheetAmortRslt.getRange(\"C2:W2\");\n            const amortRows = {};\n            \n            // Load the values of the selected range\n            finRslts.load(\"address, columnCount, rowCount, values\");\n            finAmortRows.load(\"address, columnCount, rowCount, values\");\n            finAmortRowsKey.load(\"address, columnCount, rowCount, values\");\n      \n            // Run the queued commands to load values\n            await context.sync();\n      \n            // Create lists to store matching rows and columns to sum across\n            const matchingRows = [];\n            const matchingColumns = [];\n      \n            // Iterate through fin result tab to find ER's plans\n            const employerRows = {};\n            for (let row = 0; row < finRslts.values.length; row++) {\n              const key = Number(finRslts.values[row][keyColumnIndex]);\n              if (this.employerCID == key) {\n                employerRows[finRslts.values[row][2]] = employerRows[finRslts.values[row][2]] || 0;\n                amortRows[finRslts.values[row][2]] = [];\n              }\n            }\n      \n            Object.keys(employerRows).forEach((key) => {\n              this.plans.push(key);\n            })\n            \n      \n            // Iterate through the amort rows and identify ER's rows within the plans\n            for (let row = 0; row < finAmortRows.values.length; row++) {\n              const key = finAmortRows.values[row][keyAmortColumnIndex];\n              if (key in employerRows) {\n                matchingRows.push(row);\n              }\n            }\n      \n            // Iterate through the columns and identify matching columns\n            for (let col = 0; col < finAmortRows.columnCount; col++) {\n              const header = finAmortRowsKey.values[0][col];\n              matchingColumns.push(col);\n            }\n      \n            // Create dictionaries to store totals and values for each column\n            const columnTotals = {};\n      \n            // Iterate only across the relevant portion of the result range for totals\n            for (const row of matchingRows) {\n              const employerVRP = Number(finAmortRows.values[row][0]);\n              const rowValues = {};  // Nest within employerRows{}\n      \n              for (const col of matchingColumns) {\n                // Initialize total for the column if not already present\n                const rsltType = finAmortRowsKey.values[0][col];\n                columnTotals[rsltType] = columnTotals[rsltType] || 0;\n                const numericValue = Number(finAmortRows.values[row][col]); //First column is indexed to 0\n                if (!isNaN(numericValue)) {\n                  columnTotals[rsltType] += numericValue;\n                }\n                rowValues[rsltType] = finAmortRows.values[row][col];\n              }\n              amortRows[employerVRP].push(rowValues);\n            }\n      \n            await context.sync();\n            // Display the summary in console log for debugging\n            //console.log(`The summary range address was ${finAmortRows.address}.`);\n            //console.log(`The ER CID was ${this.employerCID}.`);\n            //console.log(columnTotals);\n            //console.log(amortRows);\n            globalDRate = this.discountRate; // Set global variable for chart fresh start updates\n            //const {...copiedAmortRows} = amortRows;\n            //this.amortBases = copiedAmortRows;\n            this.amortBases = amortRows;\n            this.amortTotals = this.getAmortTotal(amortRows, this.discountRate, this.payrollInflRate);\n            this.amortTotals = this.getUpdSchedule(this.amortTotals, this.discountRate, this.payrollInflRate); // Checks for negative balances at the end of a schedule and simulates single year Fresh Start\n            \n          });\n          resolve();\n        } catch (error) {\n            console.error(error);\n        }\n      });\n    }\n\n    // Sum up amort rows\n    getAmortTotal(amortRows, dRate, payInflRate) {\n      try {\n        // Create object for storing plan amort balances and payments\n        const plans = {};\n    \n        // Iterate only across the relevant portion of the result range for totals\n        Object.keys(amortRows).forEach((ratePlan) => {\n          var planDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};  \n          const amortList = amortRows[ratePlan];\n          //console.log(amortList);\n    \n          for (const j in amortList) {\n            // roll forward balance and payment across each amort row\n            const amortBase = amortList[j]\n            var baseDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};\n            this['amortBases'][ratePlan][j]['projBalance'] = createProjArray(30);\n            this['amortBases'][ratePlan][j]['projPayment'] = createProjArray(30);\n            for (let i = 0; i < Math.max(Number(amortBase['AMORT_PERIOD']), 0); i++) {\n              if (i == 0) {\n                baseDtls['Total Balance'][i] = amortBase['VAL_DATE2_AMT']; // Start at rate-setting year, NOT val date\n                baseDtls['Total Payments'][i] = amortBase['VAL_DATE2_PMT']; // Start at rate-setting year, NOT val date\n                this['amortBases'][ratePlan][j]['projBalance'][i] = Number(amortBase['VAL_DATE2_AMT']);\n                this['amortBases'][ratePlan][j]['projPayment'][i] = Number(amortBase['VAL_DATE2_PMT']);\n              } else {\n                var iPrime = dRate; // Default to level-dollar funding type\n                if (amortBase['AMORT_FUNDING_TYPE_CD'] == '002') { // Use level-percent of pay if applicable\n                  iPrime = ((1 + dRate) / (1 + payInflRate)) - 1;\n                }\n                const numericValueBal = Math.round(Number(baseDtls['Total Balance'][i - 1]) * (1 + dRate) - Number(baseDtls['Total Payments'][i - 1]) * Math.pow(1 + dRate, 0.5));\n                let numericValuePmt = 0;\n                if (amortBase['AMORT_CAUSE_TYPE_CD'] == '120') {\n                  numericValuePmt = 0;  // Handle plan in projected surplus\n                } else {\n                  numericValuePmt = Math.round(dRSPmt(iPrime,Number(amortBase['INITIAL_AMORT_PERIOD']),Number(amortBase['AMORT_PERIOD']) - i,Number(amortBase['INITIAL_RAMP_PERIOD_YRS']),numericValueBal * Math.pow(1 + dRate, 0.5),Number(amortBase['RAMP_UP_ONLY_FLAG'])));\n                }\n\n                if (!isNaN(numericValueBal)) {\n                  baseDtls['Total Balance'][i] = numericValueBal;\n                  this['amortBases'][ratePlan][j]['projBalance'][i] = numericValueBal;\n                }\n                if (!isNaN(numericValuePmt)) {\n                  baseDtls['Total Payments'][i] = numericValuePmt;\n                  this['amortBases'][ratePlan][j]['projPayment'][i] = numericValuePmt;\n                }\n              }\n              // Add on the base's amounts to the plans total for that year\n              planDtls['Total Balance'][i] += baseDtls['Total Balance'][i];\n              planDtls['Total Payments'][i] += baseDtls['Total Payments'][i];\n            }\n            //console.log(amortBase); // Uncomment for debugging\n            //console.log(baseDtls); // Uncomment for debugging\n          }\n          // Now that the plan is processed, store results before moving to next plan\n          // Still need to check if end of schedule needs altering for negative balance\n          plans[ratePlan] = plans[ratePlan] || planDtls;\n        });\n    \n        // Display the summary in a dialog box\n        //console.log(\"The original ER amort schedules are:\");\n        //console.log(plans);\n        return plans;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    // Clean up end of schedule for overpayments\n    getUpdSchedule(origSchedule, dRate, payInflRate) {\n      try {\n        // Iterate only across the relevant portion of the result range for totals\n        var amortSchedule = origSchedule;\n    \n        Object.keys(amortSchedule).forEach((ratePlan) => {\n          var planBalances = amortSchedule[ratePlan]['Total Balance'];\n          var planPayments = amortSchedule[ratePlan]['Total Payments'];\n    \n          // Start evaluation at index 1 (after rate-setting year) since payment for prior year has already been evaluated by financing\n          var setZero = false;\n          for (let i = 1; i < 30; i++) {\n            if (setZero) {\n              planBalances[i] = 0;\n              planPayments[i] = 0;\n            } else {\n              if ((Number(planBalances[i]) < 0) && (Number(planPayments[i-1]) > 0)) {\n                planPayments[i-1] = Math.round(Number(planBalances[i-1]) * Math.pow(1 + dRate, 0.5));\n                planBalances[i] = 0;\n                planPayments[i] = 0;\n                setZero = true;\n              }\n            }\n          };\n          \n          // Now that the plan is processed, store results before moving to next plan\n          amortSchedule[ratePlan]['Total Balance'] = amortSchedule[ratePlan]['Total Balance'] || planBalances;\n          amortSchedule[ratePlan]['Total Payments'] = amortSchedule[ratePlan]['Total Payments'] || planPayments;\n        });\n    \n        // Display the summary in a dialog box\n        //console.log(\"The updated ER amort schedules are:\");\n        //console.log(amortSchedule);\n        return amortSchedule;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n  \n  // Added 2/1/24  --  Array of specified length filled with 0's\n  function createProjArray(len) {\n    return new Array(len).fill(0);\n  }\n\n  // Added 3/29/24  --  Return starting array with the first value projected forward by a given factor to the lenght of the array\n  function createRolledArray(sArr, factor) {\n    let fArr = [];\n    for (let i = 0; i < sArr.length; i++) {\n      if (i == 0) {\n        fArr.push(Math.round(sArr[0]));\n      } else {\n        fArr.push(Math.round(Number(fArr[i - 1])*Number(factor)));\n      }\n    }\n    return fArr;\n  }\n  \n  // Added 2/13/24\n  function freshStartSchedule(begBalance, dRate, period) {\n    try {\n      var planBalances = createProjArray(30);\n      var planPayments = createProjArray(30);\n  \n      planBalances[0] = Number(begBalance);\n      planPayments[0] = Math.round(dRSPmt(Number(dRate), Number(period), Number(period), 1, Number(planBalances[0]) * Math.pow(1 + Number(dRate), 0.5), 0));\n  \n      // Start evaluation at index 1 (after rate-setting year)\n      // Iterate only across the relevant portion of the result range for totals\n      for (let i = 1; i < Number(period); i++) {\n        planBalances[i] = Math.round(Number(planBalances[i-1]) * (1 + dRate) - Number(planPayments[i-1]) * Math.pow(1 + dRate, 0.5));\n        planPayments[i] = Math.round(dRSPmt(Number(dRate),Number(period),Number(period) - i,1,planBalances[i] * Math.pow(1 + dRate, 0.5),0));\n      };\n  \n      return {payments: planPayments, balances: planBalances};\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Function to get rate plan and FS period for simulation\n  async function inputFS(selectedPlan, selectedPeriod) {\n    try {\n  \n      // Get the selected values from the dropdowns asynchronously\n      //var selectedPlan = document.getElementById(\"dropdownPlanin\").value;\n      //var selectedPeriod = document.getElementById(\"dropdownPeriodin\").value;\n  \n      console.log(selectedPlan);\n      console.log(selectedPeriod);\n      // Start building the payment schedule\n      // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n      for (let i = 0; i < barChartHypUAL[\"data\"].length; i++) {\n        if (barChartHypUAL[\"data\"][i][\"label\"] == selectedPlan) {\n          var hypBalArray = [];\n          var hypPmtArray = [];\n          var hypFSObj = freshStartSchedule(Number(barChartUALBalance[\"data\"][i][\"data\"][0]), globalDRate, selectedPeriod); //Currently grabbing first payment, needs to grab beginning balance\n          // Assumes barChartUALBalance corresponds to same ordering as barChartHypUAL\n          hypBalArray = hypFSObj.balances;\n          hypPmtArray = hypFSObj.payments;\n          barChartHypUAL[\"data\"][i][\"data\"].splice(0, 30);\n          barChartHypUAL[\"data\"][i][\"data\"].unshift(...hypPmtArray);\n          const amortCount = barChartHypUAL[\"data\"][i][\"amortBases\"].length;\n          const freshStartBase = {\n            AMORT_CAUSE_TYPE_CD: 103,\n            AMORT_DESC: \"Simulated Fresh Start\",\n            AMORT_FUNDING_TYPE_CD: \"001\",\n            AMORT_PERIOD: selectedPeriod,\n            AMORT_PERIOD_TYPE_CD: \"002\",\n            INITIAL_AMORT_PERIOD: selectedPeriod,\n            INITIAL_AMT: 0, // Not set, default to 0\n            INITIAL_RAMP_PERIOD_YRS: 1,\n            INITIAL_VALUATION_YEAR_ID: Number(barChartHypUAL[\"data\"][i][\"amortBases\"][0][\"VALUATION_YEAR_ID\"]),\n            PMT_PERCENT: 0, // Not set, default to 0\n            RAMP_DIRECTION_TYPE_CD: \"NRP\",\n            RAMP_PCNT: \"\",\n            RAMP_UP_ONLY_FLAG: 0,\n            VALUATION_YEAR_ID: Number(barChartHypUAL[\"data\"][i][\"amortBases\"][0][\"VALUATION_YEAR_ID\"]),\n            VAL_DATE1_AMT: 0, // Not set, default to 0\n            VAL_DATE1_PMT: 0, // Not set, default to 0\n            VAL_DATE2_AMT: 0, // Not set, default to 0\n            VAL_DATE2_PMT: 0, // Not set, default to 0\n            VAL_DATE_AMT: 0, // Not set, default to 0\n            VAL_DATE_PMT: 0, // Not set, default to 0\n            VAL_RATE_PLAN_IDENTIFIER: Number(barChartHypUAL[\"data\"][i][\"amortBases\"][0][\"VAL_RATE_PLAN_IDENTIFIER\"]),\n            projBalance: hypBalArray,\n            projPayment: hypPmtArray\n          };\n          barChartHypUAL[\"data\"][i][\"amortBases\"].splice(0, amortCount);\n          barChartHypUAL[\"data\"][i][\"amortBases\"].push(freshStartBase);\n        }\n      }\n      // Need to iterate through and update 'UAL% of Payroll' object\n      barChartHypUAL.addPctPayData(\"red\");\n\n      window.chartHypUAL.data.datasets = barChartHypUAL.data\n      window.chartHypUAL.update();\n\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n  function dropDPopulate(valueArray) {\n    var dropdownElement = document.getElementById(\"dropdownPlan\");\n    // Clear existing options\n    dropdownElement.innerHTML = \"\";\n    // Populate dropdown with options\n    for (let i = 0; i < valueArray.length; i++) {\n      var option = document.createElement(\"option\");\n      option.value = valueArray[i];\n      option.text = valueArray[i];\n      dropdownElement.appendChild(option);\n    }\n  }\n  \n  function getSelectedDropD(dropDown) {\n    return new Promise((resolve, reject) => {\n      // Assuming dropdown has an id attribute set to \"dropdown\"\n      var dropdownElement = document.getElementById(dropDown);\n  \n      // Check if the element is found\n      if (dropdownElement) {\n        // Get the selected value\n        var selectedValue = dropdownElement.value;\n  \n        // Resolve the promise with the selected value\n        resolve(selectedValue);\n      } else {\n        // Reject the promise with an error\n        reject(new Error(\"Dropdown element not found\"));\n      }\n    });\n  }\n\n  \n  // Brute force clear any charts in the container\n  function replaceCanvas(containerName, canvasName) {\n    const container = document.getElementById(containerName);\n    const oldCanvas = document.getElementById(canvasName);\n    container.removeChild(oldCanvas);\n \n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.id = canvasName\n    container.appendChild(newCanvas);\n \n  }\n\n\n\n  // Update FS panel with chart data\n  function populateFSPanel(oAgency) {\n\n    let tableBody = document.getElementById('FStableInput').getElementsByTagName('tbody')[0];\n    while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n    let i=0;\n    for (let vrp = 0; vrp < oAgency.rateplans.length; vrp++)\n    {\n      var row = tableBody.insertRow(-1);\n      //row.style.background = globalChartBarColors[i];\n      var dropDownM = row.insertCell(-1);\n      dropDownM.innerHTML = `<select class=\"FSperiods\" id=\"dropdownPeriodin${i}\"><option value=0>Select from 1-20</option>${generateFSOptions()}</select>`;\n      var cellRiskP = row.insertCell(-1);\n      cellRiskP.innerHTML = oAgency.rateplans[vrp].Risk_Pool;\n      var cellPlanName = row.insertCell(-1);\n      cellPlanName.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Name;\n      var cellPlanID = row.insertCell(-1);\n      cellPlanID.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Id;\n      var check = row.insertCell(-1);\n      check.innerHTML = `<input type=\"checkbox\" class=\"FSapprove\" id=\"FSCheck${i}\">`;\n      var cellActuaryName = row.insertCell(-1);\n      cellActuaryName.innerHTML = oAgency.rateplans[vrp].Actuary_Name;\n      i = i + 1;\n    }\n  }\n\n  function generateFSOptions () {\n    let options = '';\n    for (let i = 1; i <= 20; i++) {\n      options += `<option value =\"${i}\">${i}</option>`;\n    }\n    return options;\n  }\n\n  function readFSPanel() {\n\n    var table = document.getElementById(\"FStableInput\").getElementsByTagName('tbody')[0];\n    for (var i = 0, row; row = table.rows[i]; i++) {\n      var e = document.getElementById(`dropdownPeriodin${i}`);\n      var FSper = Number(e.value);\n       var VRP = \"VRP \" + table.rows[i].cells[3].innerText;\n       if(FSper !=0){\n        inputFS(VRP, FSper);\n       }\n    }\n    \n  }\n\n  function resetFSperiods(){\n    var table = document.getElementById(\"FStableInput\").getElementsByTagName('tbody')[0];\n    for (var i = 0, row; row = table.rows[i]; i++) {\n      document.getElementById(`dropdownPeriodin${i}`).value = 0;\n    }\n  }\n\n  function clearAmortBasePanel() {\n    let tableBody = document.getElementById('selectBarAmortTable').getElementsByTagName('tbody')[0];\n    while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n  }\n\n  function populateAmortBasePanel(amortBaseList, yrIndex) {\n    let tableBody = document.getElementById('selectBarAmortTable').getElementsByTagName('tbody')[0];\n    //let startrow = tableBody.rows.length;\n    for (let amortBaseNum = 0; amortBaseNum < amortBaseList.length; amortBaseNum++)\n    {\n      if (amortBaseList[amortBaseNum].projBalance[yrIndex] !== 0) {\n        var row = tableBody.insertRow(-1);\n        //row.style.background = globalChartBarColors[i];\n        var cellVRP = row.insertCell(-1);\n        cellVRP.innerHTML = amortBaseList[amortBaseNum].VAL_RATE_PLAN_IDENTIFIER;\n        var cellBaseYr = row.insertCell(-1);\n        cellBaseYr.innerHTML = convertValIDToDate(amortBaseList[amortBaseNum].INITIAL_VALUATION_YEAR_ID);\n        var cellBaseName = row.insertCell(-1);\n        cellBaseName.innerHTML = amortBaseList[amortBaseNum].AMORT_DESC;\n        var cellAmortPeriod = row.insertCell(-1);\n        cellAmortPeriod.innerHTML = amortBaseList[amortBaseNum].AMORT_PERIOD; // NEED TO CLARIFY THIS IS THE AMORT PERIOD AS OF THE RATE SETTING YEAR\n        var cellProjBalance = row.insertCell(-1);\n        cellProjBalance.innerHTML = amortBaseList[amortBaseNum].projBalance[yrIndex].toLocaleString(); // NEED TO DISPLAY THE YEAR BEING REFERENCED SOMEWHERE\n        var cellProjPayment = row.insertCell(-1);\n        cellProjPayment.innerHTML = amortBaseList[amortBaseNum].projPayment[yrIndex].toLocaleString();\n        var cellRampType = row.insertCell(-1);\n        cellRampType.innerHTML = amortBaseRampShape(amortBaseList[amortBaseNum].INITIAL_RAMP_PERIOD_YRS, amortBaseList[amortBaseNum].RAMP_UP_ONLY_FLAG);\n      }\n    }\n  }\n\n  function convertValIDToDate(valDateID) {\n    let year = 0;\n    let dateStr = '6/30/'\n    if (Number(valDateID) > 113) {\n      year = Number(valDateID) / 4 + 1983.5;\n    } else {\n      year = Number(valDateID) / 4 + 1996.25;\n    }\n    return dateStr + year;\n  }\n\n  function amortBaseRampShape(rampYrs, upOnlyInd) {\n    let rampShape = '';\n    if (Number(rampYrs) > 1) {\n      if (Number(upOnlyInd) == 1) {\n        rampShape = 'Up Only';\n      } else {\n        rampShape = 'Up and Down';\n      }\n    } else {\n      rampShape = 'No Ramp';\n    }\n    return rampShape;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  // Added 1/29/24 ////////// DRS PAYMENT FUNCTIONS /////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  function dRSPmt(rate, origPer, remPer, rampPer, presVal, rampFlag) {\n    try {\n      var annuityFactor = 0;\n      if (rampFlag == 0) {\n        annuityFactor = dRSPresVal(rate, origPer, remPer, rampPer, 1)\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return Math.min(rampPer, origPer - remPer + 1, Math.max(remPer, 0)) * (presVal / annuityFactor);\n        }\n      } else if (rampFlag == 1) {\n        for (let i = 1; i <= Math.max(1, rampPer + remPer - origPer); i++) {\n          var x = 1;\n          if ( i == 1) {\n            x = Math.min(rampPer, origPer - remPer + 1)\n          } \n          annuityFactor = annuityFactor + myPresVal(rate, remPer - i + 1, -1, 0, 1) * (Math.pow(1 + rate, 1 - i)) * x; //myPresVal\n        }\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return presVal / annuityFactor * Math.min(rampPer, origPer - remPer + 1);\n        }\n      } else {\n        return 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function dRSPresVal(rate, origPer, remPer, rampPer, pmt) {\n    try {\n      const step = Math.min(origPer - remPer, origPer - rampPer);\n      const numRampDowns = Math.min(rampPer, step, Math.max(remPer, 0));\n      const rampUp = myPresVal(rate, origPer - rampPer + 1, -1, 0, 1) * myPresVal(rate, Math.max(rampPer - step, 0), -1, 0, 1);\n      var rampDown = 0;\n      if (numRampDowns > 0) {\n        for(let i = 1; i <= numRampDowns; i++) {\n          rampDown = rampDown + myPresVal(rate, origPer - rampPer - step + i, -1, 0, 1);\n        }\n      }\n      return (rampUp + rampDown) * pmt;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function myPresVal(rate, nPer, pmt, futVal, beg) {\n    try {\n      return -(pmt * (1 + rate * beg) * ((Math.pow(1 + rate, nPer) - 1) / rate) + futVal) * (1 / Math.pow(1 + rate, nPer))\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"/assets/icon_tab.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_3___ = new URL(\"/assets/icon_home.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_4___ = new URL(\"/assets/icon_sensitivity.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_5___ = new URL(\"/assets/icon_projections.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_6___ = new URL(\"/assets/icon_ual.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_7___ = new URL(\"../../assets/logo_ACTO.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_8___ = new URL(\"/assets/icon_calendar.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_9___ = new URL(\"/assets/icon_actNotes.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_10___ = new URL(\"/assets/icon_synchExl-JS.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_11___ = new URL(\"/assets/icon_themepaint.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_12___ = new URL(\"/assets/icon_exportData.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_13___ = new URL(\"/assets/icon_about.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar ___HTML_LOADER_REPLACEMENT_2___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_2___);\nvar ___HTML_LOADER_REPLACEMENT_3___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_3___);\nvar ___HTML_LOADER_REPLACEMENT_4___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_4___);\nvar ___HTML_LOADER_REPLACEMENT_5___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_5___);\nvar ___HTML_LOADER_REPLACEMENT_6___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_6___);\nvar ___HTML_LOADER_REPLACEMENT_7___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_7___);\nvar ___HTML_LOADER_REPLACEMENT_8___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_8___);\nvar ___HTML_LOADER_REPLACEMENT_9___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_9___);\nvar ___HTML_LOADER_REPLACEMENT_10___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_10___);\nvar ___HTML_LOADER_REPLACEMENT_11___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_11___);\nvar ___HTML_LOADER_REPLACEMENT_12___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_12___);\nvar ___HTML_LOADER_REPLACEMENT_13___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_13___);\nvar code = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title> Employer Pool Summary </title> <link rel=\\\"icon\\\" href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\\\"><\" + \"/script> <\" + \"script defer=\\\"defer\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_2___ + \"\\\"><\" + \"/script> </head> <body> <main> <header class=\\\"header\\\"> <h3 id=\\\"idERname\\\"> Employer-Name</h3> <h5 id=\\\"idERcid\\\">123456789</h5> <h5 id=\\\"idVY\\\">YYYY</h5> </header> <div class=\\\"toptab\\\"> <button class=\\\"tablinks\\\" value=\\\"home-tab\\\"> Home <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_3___ + \"\\\" alt=\\\"Home\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"Sensitivity-tab\\\"> Sensitivity <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_4___ + \"\\\" alt=\\\"Sensitivity Analysis\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"Projections-tab\\\"> Projections <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_5___ + \"\\\" alt=\\\"Projected Contributions\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"UAL-tab\\\"> UAL <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_6___ + \"\\\" alt=\\\"Unfunded Accrued Liability\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> </div> <div class=\\\"content\\\"> <div class=\\\"tabcontent\\\" id=\\\"home-tab\\\"> <div id=\\\"idHomeHeader\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_7___ + \"\\\" width=\\\"250\\\" height=\\\"75\\\" alt=\\\"ACTO Logo\\\" title=\\\"ACTO-Logo\\\"/> </div> <ul class=\\\"home-carousel\\\"> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_8___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Important Dates</h3> </div> <div class=\\\"desc-row\\\"> <ul> <li> 4/30/24 : ADP inclusion deadline.</li> <li> 6/30/24 : Another deadline</li> <li> 6/30/24 : Some other deadline</li> </ul> </div> <div class=\\\"progress-row\\\"> <progress id=\\\"home_progbar\\\" max=\\\"100\\\" value=\\\"0\\\"></progress> </div> <div class=\\\"footer-row\\\" id=\\\"home_TimeDays\\\"> </div> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_9___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Announcements</h3> </div> <div class=\\\"desc-row\\\"> <p> General announcements or reminders can be placed here. &#128204; Notes about pooled plan valuation checking. Location of other excel actuary tools to assist in checking pooled plans. </p> </div> <div class=\\\"footer-row\\\"> <p> - Technology Team </p> </div> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_10___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Synchronize</h3> </div> <div class=\\\"desc-row\\\"> <p> The Excel Add-in will automatically reload its data after the Print Rate Plan Report Macro is completed. &#128226; There is no need to execute this function. Synchronizing will reload Office.initiliaze using the current RPID in the Excel workbook. </p> </div> <button id=\\\"reLoad\\\" title=\\\"Reload\\\" class=\\\"addOptions\\\"> &#127756; Synchronize </button> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_11___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Color Theme </h3> </div> <div class=\\\"desc-row\\\"> <p> Change the color theme of the document. This alters all background, row selection, shading, and text colors. </p> </div> <select name=\\\"theme-select\\\" id=\\\"theme-select\\\" title=\\\"themeselection\\\"> <option selected=\\\"selected\\\" disabled=\\\"disabled\\\">&#128760; Theme </option> <option value=\\\"gray\\\">&#128125; GrayMa</option> <option value=\\\"pink\\\">&#128039; PinkYe</option> <option value=\\\"green\\\">&#129361; AvocAi</option> <option value=\\\"brown\\\">&#127849; DonuTo</option> <option value=\\\"black\\\">&#128060; PandSu</option> </select> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_12___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3>Export Data</h3> </div> <div class=\\\"desc-row\\\"> <p> Transfer the aggregated information currently loaded to another file type. </p> </div> <button id=\\\"expExl\\\" title=\\\"ExportExcel\\\" class=\\\"addOptions\\\"> &#128215; Excel </button> <br> <button id=\\\"printPDF\\\" title=\\\"PrinttoPDF\\\" class=\\\"addOptions\\\"> &#128190; PDF </button> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_13___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> About</h3> </div> <div class=\\\"desc-row\\\"> <p> Office Add-in platform that aggregates employer information for pool plans by SuperPool in tandem with the Pool financing workbook. </p> </div> </li> </ul> </div> <div class=\\\"tabcontent\\\" id=\\\"Sensitivity-tab\\\"> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblDiscountSensitivity\\\">Discount Rate Sensitivity &plusmn; 1%</h3> <table id=\\\"idTblDiscountSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblInflationSensitivity\\\">Inflation Last Annual &plusmn; 1%</h3> <table id=\\\"idTblInflationSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblMortalitySensitivity\\\">Mortality Sensitivity &plusmn; 10%</h3> <table id=\\\"idTblMortalitySensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblMVA\\\">Assets</h3> <table id=\\\"idTblMVA\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th> </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>MVA</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblmaturityMeasures\\\">Maturity Measures</h3> <table id=\\\"idTblmaturityMeasures\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>RET AL to Total AL Ratio</th> <th>ACT to Unique RET Ratio</th> <th>ACT Count</th> <th>RET Count</th> <th>Unique RET Count</th> <th>RET AL</th> <th>Total AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblHypotheticalTerm\\\"> Hypothetical Termination </h3> <table id=\\\"idTblHypotheticalTerm\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"3\\\">3.06 % </th> <th colspan=\\\"3\\\">5.06 % </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblLDROM\\\"> Low Default Risk Obligation Measure </h3> <table id=\\\"idTblLDROM\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"4\\\">Total AL</th> <th colspan=\\\"3\\\">Total</th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>ACT</th> <th>TRA</th> <th>SEP</th> <th>RET</th> <th>AL</th> <th>UAL</th> <th>Hyp Cost</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div class=\\\"tabcontent\\\" id=\\\"Projections-tab\\\"> <h3 id=\\\"collapsibleProjTbls\\\">Projected Contributions</h3> <table id=\\\"idTblprojections0\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections1\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections2\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections3\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections4\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections5\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections6\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div class=\\\"tabcontent\\\" id=\\\"UAL-tab\\\"> <h3>Combined UAL Schedule</h3> <div class=\\\"chart-container\\\" id=\\\"chartContainer1\\\"> <canvas id=\\\"chartUAL\\\"></canvas> </div> <br> <h3>Hypothetical UAL Schedule</h3> <div class=\\\"chart-container\\\" id=\\\"chartContainer2\\\"> <canvas id=\\\"chartHypUAL\\\"></canvas> </div> <div id=\\\"FSselection\\\"> <button id=\\\"buttonFreshStart\\\">Simulate Fresh Start</button> <button id=\\\"buttonResetFS\\\">Reset</button> <table id=\\\"FStableInput\\\"> <thead> <tr> <th>Fresh Start Period</th> <th>Risk Pool</th> <th>Plan Name</th> <th>VRP</th> <th></th> <th>Actuary</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div id=\\\"amortSchedule\\\"> <table id=\\\"selectBarAmortTable\\\"> <thead> <tr> <th>VRP</th> <th>Year Established</th> <th>Amort Base</th> <th>Amort Period</th> <th>Balance</th> <th>Payment</th> <th>Ramp Shape</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> </div> </div> </main> </body> <\" + \"script>let date2=new Date(\\\"06/30/2024\\\"),date1=new Date(Date.now()),Difference_In_Time=Math.round((date2.getTime()-date1.getTime())/864e5);document.getElementById(\\\"home_TimeDays\\\").innerHTML=\\\"Days left: \\\"+Difference_In_Time,document.getElementById(\\\"home_progbar\\\").value=100-Difference_In_Time/365*100;const setTheme=e=>document.documentElement.className=e;var tablink_a=document.getElementsByClassName(\\\"tablinks\\\"),table_a=document.getElementsByClassName(\\\"collapsibleTbl\\\");function openTab(e){var t,n,l;for(n=document.getElementsByClassName(\\\"tabcontent\\\"),l=document.getElementsByClassName(\\\"tablinks\\\"),t=0;t<n.length;t++)n[t].style.display=\\\"none\\\";for(t=0;t<l.length;t++)l[t].className=l[t].className.replace(\\\" active\\\",\\\"\\\");document.getElementById(e.currentTarget.getAttribute(\\\"value\\\")).style.display=\\\"block\\\",e.currentTarget.className+=\\\" active\\\"}function hideTable(e){var t=document.getElementById(e.currentTarget.getAttribute(\\\"value\\\")).style;\\\"none\\\"!=t.display?t.display=\\\"none\\\":t.removeProperty(\\\"display\\\")}function collapseProjTbl(e){var t=new Date(document.getElementById(\\\"idVY\\\").innerHTML).getFullYear(),n=document.getElementById(\\\"collapsibleProjTbls\\\");for(i=0;i<7;i++){if(tbl=document.getElementById(`idTblprojections${i}`),tbl.rows[tbl.rows.length-1].cells[0].innerHTML=\\\"06/30/\\\"+(t+i)+\\\" | \\\"+(t+i+2)+\\\"-\\\"+(t+i+3),\\\"Projected Contributions\\\"==n.innerHTML&&(tbl.rows[0].cells[0].innerHTML=\\\"Valuation Year\\\",tbl.rows[0].cells[1].innerHTML=\\\"Rate Setting Year\\\",tbl.getElementsByTagName(\\\"thead\\\")[0].style.display=\\\"none\\\",tbl.getElementsByTagName(\\\"tbody\\\")[0].style.display=\\\"none\\\",6==i))return document.getElementById(\\\"idTblprojections0\\\").getElementsByTagName(\\\"thead\\\")[0].style.removeProperty(\\\"display\\\"),void(n.innerHTML=\\\"Employer Projected Contributions\\\");if(\\\"Projected Contributions\\\"!=n.innerHTML&&(tbl.rows[0].cells[0].innerHTML=\\\"Plan Name\\\",tbl.rows[0].cells[1].innerHTML=\\\"VRP\\\",tbl.getElementsByTagName(\\\"thead\\\")[0].style.removeProperty(\\\"display\\\"),tbl.getElementsByTagName(\\\"tbody\\\")[0].style.removeProperty(\\\"display\\\"),6==i))return void(n.innerHTML=\\\"Projected Contributions\\\")}}document.getElementById(\\\"collapsibleProjTbls\\\").addEventListener(\\\"click\\\",collapseProjTbl,!1),document.getElementById(\\\"theme-select\\\").addEventListener(\\\"change\\\",(function(){setTheme(this.value)})),Array.from(tablink_a).forEach((function(e){e.addEventListener(\\\"click\\\",openTab,!1)})),Array.from(table_a).forEach((function(e){e.addEventListener(\\\"click\\\",hideTable,!1)}))<\" + \"/script> </html>\";\n// Exports\nexport default code;"],"names":["module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","Number","AgencyDetails","p_name","p_cid","cid","rateplans","allplanlist","data","row","VRP","ERName","RPName","CountyName","ActuaryName","RiskPoolID","CalPERSID","vrp","vrpname","actuaryname","riskpool","Rate_Plan_Id","Rate_Plan_Name","Actuary_Name","Risk_Pool","AssumptionDetails","p_vy","p_interest","p_salarygrowth","year","valuationyear","TableStructure","oAgency","oAssumptions","pTableNameID","pDataSource","aFieldCodes","aFormatCodes","aVisibilityCodes","aERTotalRowCodes","TableNameId","DataSource","FieldCodes","FormatCodes","VisibilityCodes","ERTotalRowCodes","FieldNames","ERTotalRowValues","SumTotalValues","VRPValues","getFieldNames","getVRPValues","getSumTotalvalues","getERTotalRowValues","_this","colMax","fincode","tmp_fieldname","col","_this2","rowMax","tmp_vrpvalues","RP_FinCode","RP_Value","fsum","retval","eval","val1","val2","indexOf","sum","onChange","_x2","_onChange","_callee9","event","_context9","Excel","run","_ref6","_callee8","context","_context8","sync","VRPTrigger","_x12","_x3","_VRPTrigger","_callee11","_context11","_ref7","_callee10","sheetER","vrpId","vrpRngLoc","_context10","workbook","worksheets","getItem","getRange","load","address","console","log","changeType","source","FetchExcelData","getAmortSummary","_x13","t0","_FetchExcelData","_callee13","_context13","_ref8","_callee12","sheetRPfinancingAll","sheetPostRPfinancing","sheetCalcsCurRP","sheetRPinfo","sheetControl","sheetPEPRAEe","exl_RPfinancingAll","exl_PostRPfinancing","exl_RPinfo","exl_PEPRAEe","exl_EmployerName","exl_CalpersId","exl_ValuationYear","exl_InterestRate","exl_PayrollGrowth","RPinfo","Agency","Assumptions","Data","_context12","getRatePlans","LoadInfoToDoc","SummaryTableControl","_x14","oAssum","getElementById","innerHTML","populateFSPanel","aData","DS0","oTable_MM","oTable_HT","oTable_DR","oTable_IL","oTable_MS","oTable_MVA","oTable_LDROM","oTable_P0","oTable_P1","oTable_P2","oTable_P3","oTable_P4","oTable_P5","oTable_P6","DataTableToHTML","oTable","tableBody","tableFoot","rows","deleteRow","insertRow","insertCell","fcode","cellVal","FormatVisible","result","toLocaleString","style","minimumFractionDigits","toFixed","rowF","cellER","colSpan","formatCode","cellf","Office","onReady","initialize","onclick","readFSPanel","_ref","_callee","_context","onChanged","add","_x","ChartDataUAL","plan","empAmortSch","planColor","planBorderColor","objData","label","order","stack","yAxisID","backgroundColor","borderColor","amortBases","planAmortSch","projPaySch","borderDash","hidden","createProjArray","newArray","filter","item","totPmt","j","k","barChartUAL","barChartUALBalance","barChartHypUAL","chart1Canvas","chart2Canvas","chart1","getContext","chart2","globalDRate","Chart","defaults","global","elements","rectangle","borderWidth","globalChartBarColors","globalChartBorderColors","renderUALChart","chartName","cDataSet","xLabelStart","xValues","Legend","afterFit","height","chartUAL","labels","datasets","legend","scales","xAxes","stacked","yAxes","id","position","ticks","callback","index","maximumFractionDigits","fontColor","gridLines","drawOnChartArea","color","lineWidth","tooltips","callbacks","tooltipItem","yLabel","onClick","evt","clearAmortBasePanel","element","datasetIndex","_datasetIndex","_index","populateAmortBasePanel","chartHypUAL","getPoolSummary","_getPoolSummary","_callee15","_context15","_ref9","_callee14","sheetFinRslt","keyColumnIndex","employerCID","employerRslts","employerRsltsKey","finRsltCds","matchingRows","matchingColumns","header","columnTotals","_i2","_matchingColumns","_col2","rsltType","_iterator2","_step2","_row3","numericValue","_context14","columnCount","includes","_createForOfIteratorHelper","_x15","getPlanSummary","_getPlanSummary","_callee17","_context17","_ref10","_callee16","employerRows","_i3","_matchingRows2","_row4","employerVRP","rowValues","_iterator3","_step3","_col3","_context16","inner","_x16","_getAmortSummary","_callee19","_context19","_ref11","_callee18","amortSch","_context18","EmpUAL","getProps","addAmortData","splice","addData","addPayrollData","payrollData","empTotal","addPctPayData","addBalanceData","replaceCanvas","clearRect","width","rateYear","resetFSperiods","_x17","plugins","register","afterDatasetsDraw","chart","easing","ctx","grandUALTotal","labelIndex","total","highestIndex","dataset","getDatasetMeta","xPos","_model","x","yPos","save","translate","rotate","Math","PI","fillStyle","font","textAlign","fillText","toString","restore","textBaseline","discountRate","payrollInflRate","plans","amortTotals","pctUALData","_addAmortData","_getProps","_callee4","_this3","_context4","_ref2","_callee3","_context3","_ref3","_callee2","sheetCtrl","sheetERProj","cID","curYear","dRate","pInflRate","empPayroll","_context2","createRolledArray","_x6","_x4","_x5","_callee7","_this4","_context7","_ref4","_callee6","_context6","_ref5","_callee5","sheetAmortRslt","keyAmortColumnIndex","finRslts","finAmortRows","finAmortRowsKey","amortRows","_row","_i","_matchingRows","_row2","_iterator","_step","_col","_context5","getAmortTotal","getUpdSchedule","_x9","_x7","_x8","payInflRate","_this5","ratePlan","planDtls","amortList","amortBase","baseDtls","max","iPrime","numericValuePmt","numericValueBal","round","pow","dRSPmt","origSchedule","amortSchedule","planBalances","planPayments","setZero","len","Array","fill","sArr","factor","fArr","freshStartSchedule","begBalance","period","payments","balances","inputFS","_x10","_x11","_inputFS","_callee20","selectedPlan","selectedPeriod","_barChartHypUAL$data$","hypBalArray","hypPmtArray","hypFSObj","amortCount","freshStartBase","_context20","unshift","_toConsumableArray","AMORT_CAUSE_TYPE_CD","AMORT_DESC","AMORT_FUNDING_TYPE_CD","AMORT_PERIOD","AMORT_PERIOD_TYPE_CD","INITIAL_AMORT_PERIOD","INITIAL_AMT","INITIAL_RAMP_PERIOD_YRS","INITIAL_VALUATION_YEAR_ID","PMT_PERCENT","RAMP_DIRECTION_TYPE_CD","RAMP_PCNT","RAMP_UP_ONLY_FLAG","VALUATION_YEAR_ID","VAL_DATE1_AMT","VAL_DATE1_PMT","VAL_DATE2_AMT","VAL_DATE2_PMT","VAL_DATE_AMT","VAL_DATE_PMT","VAL_RATE_PLAN_IDENTIFIER","projBalance","projPayment","update","dropDPopulate","valueArray","dropdownElement","option","createElement","text","appendChild","getSelectedDropD","dropDown","containerName","canvasName","container","oldCanvas","removeChild","newCanvas","generateFSOptions","table","FSper","cells","innerText","amortBaseList","yrIndex","amortBaseNum","convertValIDToDate","amortBaseRampShape","valDateID","rampYrs","upOnlyInd","rate","origPer","remPer","rampPer","presVal","rampFlag","annuityFactor","dRSPresVal","min","myPresVal","pmt","step","numRampDowns","rampUp","rampDown","nPer","futVal","beg","___HTML_LOADER_IMPORT_0___","URL","___HTML_LOADER_IMPORT_1___","___HTML_LOADER_IMPORT_2___","___HTML_LOADER_IMPORT_3___","___HTML_LOADER_IMPORT_4___","___HTML_LOADER_IMPORT_5___","___HTML_LOADER_IMPORT_6___","___HTML_LOADER_IMPORT_7___","___HTML_LOADER_IMPORT_8___","___HTML_LOADER_IMPORT_9___","___HTML_LOADER_IMPORT_10___","___HTML_LOADER_IMPORT_11___","___HTML_LOADER_IMPORT_12___","___HTML_LOADER_IMPORT_13___"],"sourceRoot":""}